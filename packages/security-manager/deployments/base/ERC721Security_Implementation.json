{
  "address": "0x2b5fB899a7B64b35d95fC84Fe2784d089E7730E9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "CurrencyTransferLibFailedNativeTransfer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NFTMetadataFrozen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTMetadataInvalidUrl",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTMetadataUnauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRoyaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRoyaltyBps",
          "type": "uint256"
        }
      ],
      "name": "DefaultRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "platformFeeRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "flatFee",
          "type": "uint256"
        }
      ],
      "name": "FlatPlatformFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MetadataFrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "platformFeeRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "platformFeeBps",
          "type": "uint256"
        }
      ],
      "name": "PlatformFeeInfoUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IPlatformFee.PlatformFeeType",
          "name": "feeType",
          "type": "uint8"
        }
      ],
      "name": "PlatformFeeTypeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "PrimarySaleRecipientUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyForToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "mintedTo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenIdMinted",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "TokensMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "mintedTo",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenIdMinted",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "royaltyBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "primarySaleRecipient",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "validityStartTimestamp",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "validityEndTimestamp",
              "type": "uint128"
            },
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "secure",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct ISecurityTokenERC721.MintRequest",
          "name": "mintRequest",
          "type": "tuple"
        }
      ],
      "name": "TokensMintedWithSignature",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "METADATA_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractType",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractVersion",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "contracts",
      "outputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "hashBytecode",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hashInitData",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "secure",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freezeMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultRoyaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlatformFeeInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltyInfoForToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultMinter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_trustedForwarders",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_saleRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_royaltyBps",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_platformFeeBps",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "_platformFeeRecipient",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_secure",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        }
      ],
      "name": "mintTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "royaltyBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "primarySaleRecipient",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "validityStartTimestamp",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "validityEndTimestamp",
              "type": "uint128"
            },
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "secure",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ],
          "internalType": "struct ISecurityTokenERC721.MintRequest",
          "name": "_req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "mintWithSignature",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenIdMinted",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenIdToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primarySaleRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "setDefaultRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_platformFeeBps",
          "type": "uint256"
        }
      ],
      "name": "setPlatformFeeInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_saleRecipient",
          "type": "address"
        }
      ],
      "name": "setPrimarySaleRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bps",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyInfoForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_secure",
          "type": "bool"
        }
      ],
      "name": "updateSecureField",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uriFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "royaltyBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "primarySaleRecipient",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "validityStartTimestamp",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "validityEndTimestamp",
              "type": "uint128"
            },
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "secure",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ],
          "internalType": "struct ISecurityTokenERC721.MintRequest",
          "name": "_req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        }
      ],
      "name": "verifyTokenAtAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x786f299ea4e40b1fc8e5faf99aebbef47046de7d36840b8bf96764447bb72825",
  "receipt": {
    "to": null,
    "from": "0xCC2637C9A3Ed518A58DBB2d0a52460a706083723",
    "contractAddress": "0x2b5fB899a7B64b35d95fC84Fe2784d089E7730E9",
    "transactionIndex": 51,
    "gasUsed": "4711236",
    "logsBloom": "0x
    "blockHash": "0x7c3c86c4889bf88c12dd7e721b150d020e296b617db56de8698358565c67b06e",
    "transactionHash": "0x786f299ea4e40b1fc8e5faf99aebbef47046de7d36840b8bf96764447bb72825",
    "logs": [],
    "blockNumber": 16558858,
    "cumulativeGasUsed": "11435846",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c98e06287ab96a5c8770024f5907d28b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CurrencyTransferLibFailedNativeTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTMetadataFrozen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTMetadataInvalidUrl\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTMetadataUnauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyaltyBps\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"platformFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flatFee\",\"type\":\"uint256\"}],\"name\":\"FlatPlatformFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MetadataFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"platformFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFeeBps\",\"type\":\"uint256\"}],\"name\":\"PlatformFeeInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IPlatformFee.PlatformFeeType\",\"name\":\"feeType\",\"type\":\"uint8\"}],\"name\":\"PlatformFeeTypeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"PrimarySaleRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyBps\",\"type\":\"uint256\"}],\"name\":\"RoyaltyForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mintedTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenIdMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mintedTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenIdMinted\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"primarySaleRecipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"validityStartTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"validityEndTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"secure\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ISecurityTokenERC721.MintRequest\",\"name\":\"mintRequest\",\"type\":\"tuple\"}],\"name\":\"TokensMintedWithSignature\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"METADATA_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"hashBytecode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hashInitData\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"secure\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformFeeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyInfoForToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultMinter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_trustedForwarders\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_saleRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_royaltyBps\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_platformFeeBps\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_platformFeeRecipient\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_secure\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"primarySaleRecipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"validityStartTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"validityEndTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"secure\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ISecurityTokenERC721.MintRequest\",\"name\":\"_req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"mintWithSignature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIdMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenIdToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primarySaleRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBps\",\"type\":\"uint256\"}],\"name\":\"setDefaultRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_platformFeeBps\",\"type\":\"uint256\"}],\"name\":\"setPlatformFeeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_saleRecipient\",\"type\":\"address\"}],\"name\":\"setPrimarySaleRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyInfoForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_secure\",\"type\":\"bool\"}],\"name\":\"updateSecureField\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"primarySaleRecipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"validityStartTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"validityEndTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"secure\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ISecurityTokenERC721.MintRequest\",\"name\":\"_req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"verifyTokenAtAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NFTMetadataFrozen(uint256)\":[{\"details\":\"the nft metadata is frozen\"}],\"NFTMetadataInvalidUrl()\":[{\"details\":\"Invalid token metadata url\"}],\"NFTMetadataUnauthorized()\":[{\"details\":\"The sender is not authorized to perform the action\"}]},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Override the approve function to check the whitelist\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}.\"},\"contractType()\":{\"details\":\"Returns the module type of the contract.\"},\"contractVersion()\":{\"details\":\"Returns the version of the contract.\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getDefaultRoyaltyInfo()\":{\"details\":\"Returns the platform fee bps and recipient.\"},\"getPlatformFeeInfo()\":{\"details\":\"Returns the platform fee bps and recipient.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getRoyaltyInfoForToken(uint256)\":{\"details\":\"Returns the royalty recipient for a particular token Id.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,string,string,string,address[],address,address,uint128,uint128,address)\":{\"details\":\"Initializes the contract, like a constructor.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintTo(address,string,bool,address)\":{\"details\":\"Lets an account with MINTER_ROLE mint an NFT.\"},\"mintWithSignature((address,address,uint256,address,string,uint256,address,uint128,uint128,bytes32,bool,address),bytes)\":{\"details\":\"Mints an NFT according to the provided mint request.\"},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"The bytes data that makes up the batch of function calls to execute.\"},\"returns\":{\"results\":\"The bytes data that makes up the result of the batch of function calls executed.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"See EIP-2981\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setContractURI(string)\":{\"details\":\"Lets a module admin set the URI for contract-level metadata.\"},\"setDefaultRoyaltyInfo(address,uint256)\":{\"details\":\"Lets a module admin update the royalty bps and recipient.\"},\"setOwner(address)\":{\"details\":\"Lets a module admin set a new owner for the contract. The new owner must be a module admin.\"},\"setPlatformFeeInfo(address,uint256)\":{\"details\":\"Lets a module admin update the fees on primary sales.\"},\"setPrimarySaleRecipient(address)\":{\"details\":\"Lets a module admin set the default recipient of all primary sales.\"},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"details\":\"Lets a module admin set the royalty recipient for a particular token Id.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the URI for a tokenId\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"updateSecureField(address,bool)\":{\"details\":\"Updates the secure field of a token's SecurityInfo.\"},\"verify((address,address,uint256,address,string,uint256,address,uint128,uint128,bytes32,bool,address),bytes)\":{\"details\":\"Verifies that a mint request is signed by an account holding MINTER_ROLE (at the time of the function call).\"}},\"stateVariables\":{\"MAX_BPS\":{\"details\":\"Max bps in the thirdweb system\"},\"METADATA_ROLE\":{\"details\":\"Only METADATA_ROLE holders can update NFT metadata.\"},\"MINTER_ROLE\":{\"details\":\"Only MINTER_ROLE holders can sign off on `MintRequest`s.\"},\"TRANSFER_ROLE\":{\"details\":\"Only TRANSFER_ROLE holders can have tokens transferred from or to them, during restricted transfers.\"},\"_owner\":{\"details\":\"Owner of the contract (purpose: OpenSea compatibility, etc.)\"},\"contractURI\":{\"details\":\"Contract level metadata.\"},\"minted\":{\"details\":\"Mapping from mint request UID => whether the mint request is processed.\"},\"nextTokenIdToMint\":{\"details\":\"The token ID of the next token to mint.\"},\"platformFeeBps\":{\"details\":\"The % of primary sales collected by the contract as fees.\"},\"platformFeeRecipient\":{\"details\":\"The adress that receives all primary sales value.\"},\"primarySaleRecipient\":{\"details\":\"The adress that receives all primary sales value.\"},\"royaltyBps\":{\"details\":\"The percentage of royalty how much royalty in basis points.\"},\"royaltyInfoForToken\":{\"details\":\"Token ID => royalty recipient and bps for token\"},\"royaltyRecipient\":{\"details\":\"The recipient of who gets the royalty.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"freezeMetadata()\":{\"notice\":\"Freezes the metadata URI for a given NFT.\"},\"multicall(bytes[])\":{\"notice\":\"Receives and executes a batch of function calls on this contract.\"},\"setTokenURI(uint256,string)\":{\"notice\":\"Sets the metadata URI for a given NFT.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol\":\"ERC721Security\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@auditfortess/erc721-security/contracts/interface/IAuditfortessContract.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\ninterface IAuditfortessContract {\\n    /// @dev Returns the module type of the contract.\\n    function contractType() external pure returns (bytes32);\\n\\n    /// @dev Returns the version of the contract.\\n    function contractVersion() external pure returns (uint8);\\n\\n    /// @dev Returns the metadata URI of the contract.\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     *  @dev Sets contract URI for the storefront-level metadata of the contract.\\n     *       Only module admin can call this function.\\n     */\\n    function setContractURI(string calldata _uri) external;\\n}\\n\",\"keccak256\":\"0x5a6950e9d271ed35f374b7c238720f3c6163249b4aef761aeebfabf6b56af1f0\",\"license\":\"Apache-2.0\"},\"@auditfortess/erc721-security/contracts/interface/ISecurityTokenERC721.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\n/**\\n *  `SignatureMint` is an ERC 721 contract. It lets anyone mint NFTs by producing a mint request\\n *  and a signature (produced by an account with MINTER_ROLE, signing the mint request).\\n */\\ninterface ISecurityTokenERC721 is IERC721Upgradeable {\\n    /**\\n     *  @notice The body of a request to mint NFTs.\\n     *\\n     *  @param to The receiver of the NFTs to mint.\\n     *  @param uri The URI of the NFT to mint.\\n     *  @param price Price to pay for minting with the signature.\\n     *  @param currency The currency in which the price per token must be paid.\\n     *  @param validityStartTimestamp The unix timestamp after which the request is valid.\\n     *  @param validityEndTimestamp The unix timestamp after which the request expires.\\n     *  @param uid A unique identifier for the request.\\n     *  @param secure is a contract secure.\\n     *  @param contractAddress is a contract address.\\n     */\\n    struct MintRequest {\\n        address to;\\n        address royaltyRecipient;\\n        uint256 royaltyBps;\\n        address primarySaleRecipient;\\n        string uri;\\n        uint256 price;\\n        address currency;\\n        uint128 validityStartTimestamp;\\n        uint128 validityEndTimestamp;\\n        bytes32 uid;\\n        bool secure;\\n        address contractAddress;\\n    }\\n\\n    /// @dev Emitted when an account with MINTER_ROLE mints an NFT.\\n    event TokensMinted(address indexed mintedTo, uint256 indexed tokenIdMinted, string uri);\\n\\n    /// @dev Emitted when tokens are minted.\\n    event TokensMintedWithSignature(\\n        address indexed signer,\\n        address indexed mintedTo,\\n        uint256 indexed tokenIdMinted,\\n        MintRequest mintRequest\\n    );\\n\\n    /**\\n     *  @notice Verifies that a mint request is signed by an account holding\\n     *         MINTER_ROLE (at the time of the function call).\\n     *\\n     *  @param req The mint request.\\n     *  @param signature The signature produced by an account signing the mint request.\\n     *\\n     *  returns (success, signer) Result of verification and the recovered address.\\n     */\\n    function verify(\\n        MintRequest calldata req,\\n        bytes calldata signature\\n    ) external view returns (bool success, address signer);\\n\\n    /**\\n     *  @notice Lets an account with MINTER_ROLE mint an NFT.\\n     *\\n     *  @param _to The address to mint the NFT to.\\n     *  @param _uri The URI to assign to the NFT.\\n     *  @param _secure is a contract safe to use.\\n     *  @param _contractAddress is a contract address.\\n     *\\n     *  @return tokenId of the NFT minted.\\n     */\\n    function mintTo(\\n        address _to,\\n        string calldata _uri,\\n        bool _secure,\\n        address _contractAddress\\n    ) external returns (uint256);\\n\\n    /**\\n     *  @notice Mints an NFT according to the provided mint request.\\n     *\\n     *  @param req The mint request.\\n     *  @param signature he signature produced by an account signing the mint request.\\n     */\\n    function mintWithSignature(MintRequest calldata req, bytes calldata signature) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0xf91f14cd7b86bff647c3f161c3c898031c65492ba4636ae978e85cf429f58ca1\",\"license\":\"Apache-2.0\"},\"@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\n/// @author auditfortess\\n\\n// Interface\\nimport { ISecurityTokenERC721 } from \\\"../interface/ISecurityTokenERC721.sol\\\";\\nimport { IAuditfortessContract } from \\\"../interface/IAuditfortessContract.sol\\\";\\n\\nimport \\\"@thirdweb-dev/contracts/infra/interface/IThirdwebContract.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/extension/interface/IPlatformFee.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/extension/interface/IPrimarySale.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/extension/interface/IRoyalty.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/extension/interface/IOwnable.sol\\\";\\n\\n//Extensions\\nimport \\\"@thirdweb-dev/contracts/extension/NFTMetadata.sol\\\";\\n\\n// Token\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\n\\n// Signature utils\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\n\\n// Access Control + security\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\n// Meta transactions\\nimport \\\"@thirdweb-dev/contracts/external-deps/openzeppelin/metatx/ERC2771ContextUpgradeable.sol\\\";\\n\\n// Utils\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/extension/Multicall.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/lib/CurrencyTransferLib.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/lib/FeeType.sol\\\";\\n\\n// Helper interfaces\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\n\\n// TODO\\n// add proxy support\\n// check if the contract is proxy - check the address of the implementation\\n\\ncontract ERC721Security is\\n    Initializable,\\n    IAuditfortessContract,\\n    IOwnable,\\n    IRoyalty,\\n    IPrimarySale,\\n    IPlatformFee,\\n    ReentrancyGuardUpgradeable,\\n    EIP712Upgradeable,\\n    ERC2771ContextUpgradeable,\\n    Multicall,\\n    AccessControlEnumerableUpgradeable,\\n    ERC721EnumerableUpgradeable,\\n    ISecurityTokenERC721,\\n    NFTMetadata\\n{\\n    using ECDSAUpgradeable for bytes32;\\n    using StringsUpgradeable for uint256;\\n\\n    struct SecurityInfo {\\n        string uri;\\n        uint256 hashBytecode;\\n        uint256 hashInitData;\\n        bool secure;\\n        address contractAddress;\\n    }\\n\\n    mapping(address => SecurityInfo) public contracts;\\n\\n    bytes32 private constant MODULE_TYPE = bytes32(\\\"ERC721Security\\\");\\n    uint256 private constant VERSION = 1;\\n\\n    bytes32 private constant TYPEHASH =\\n        keccak256(\\n            \\\"MintRequest(address to,address royaltyRecipient,uint256 royaltyBps,address primarySaleRecipient,string uri,uint256 price,address currency,uint128 validityStartTimestamp,uint128 validityEndTimestamp,bytes32 uid)\\\"\\n        );\\n\\n\\n    /// @dev Only TRANSFER_ROLE holders can have tokens transferred from or to them, during restricted transfers.\\n    bytes32 public constant TRANSFER_ROLE = keccak256(\\\"TRANSFER_ROLE\\\");\\n    /// @dev Only MINTER_ROLE holders can sign off on `MintRequest`s.\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    /// @dev Only METADATA_ROLE holders can update NFT metadata.\\n    bytes32 public constant METADATA_ROLE = keccak256(\\\"METADATA_ROLE\\\");\\n\\n    /// @dev Max bps in the thirdweb system\\n    uint256 private constant MAX_BPS = 10_000;\\n\\n    /// @dev Owner of the contract (purpose: OpenSea compatibility, etc.)\\n    address private _owner;\\n\\n    /// @dev The token ID of the next token to mint.\\n    uint256 public nextTokenIdToMint;\\n\\n    /// @dev The adress that receives all primary sales value.\\n    address public primarySaleRecipient;\\n\\n    /// @dev The adress that receives all primary sales value.\\n    address public platformFeeRecipient;\\n\\n    /// @dev The recipient of who gets the royalty.\\n    address private royaltyRecipient;\\n\\n    /// @dev The percentage of royalty how much royalty in basis points.\\n    uint128 private royaltyBps;\\n\\n    /// @dev The % of primary sales collected by the contract as fees.\\n    uint128 private platformFeeBps;\\n\\n    /// @dev Contract level metadata.\\n    string public contractURI;\\n\\n    /// @dev Mapping from mint request UID => whether the mint request is processed.\\n    mapping(bytes32 => bool) private minted;\\n\\n    /// @dev Token ID => royalty recipient and bps for token\\n    mapping(uint256 => RoyaltyInfo) private royaltyInfoForToken;\\n\\n    /// @dev Initializes the contract, like a constructor.\\n    function initialize(\\n        address _defaultAdmin,\\n        address _defaultMinter,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _contractURI,\\n        address[] memory _trustedForwarders,\\n        address _saleRecipient,\\n        address _royaltyRecipient,\\n        uint128 _royaltyBps,\\n        uint128 _platformFeeBps,\\n        address _platformFeeRecipient\\n    ) external initializer {\\n        // Initialize inherited contracts, most base-like -> most derived.\\n        __ReentrancyGuard_init();\\n        __EIP712_init(\\\"TokenERC721\\\", \\\"1\\\");\\n        __ERC2771Context_init(_trustedForwarders);\\n        __ERC721_init(_name, _symbol);\\n\\n        // Initialize this contract's state.\\n        royaltyRecipient = _royaltyRecipient;\\n        royaltyBps = _royaltyBps;\\n        platformFeeRecipient = _platformFeeRecipient;\\n        primarySaleRecipient = _saleRecipient;\\n        contractURI = _contractURI;\\n\\n        require(_platformFeeBps <= MAX_BPS, \\\"exceeds MAX_BPS\\\");\\n        platformFeeBps = _platformFeeBps;\\n\\n        _owner = _defaultAdmin;\\n        _setupRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\\n        _setupRole(MINTER_ROLE, _defaultAdmin);\\n        _setupRole(MINTER_ROLE, _defaultMinter);\\n\\n        _setupRole(METADATA_ROLE, _defaultAdmin);\\n        _setRoleAdmin(METADATA_ROLE, METADATA_ROLE);\\n\\n        _setupRole(TRANSFER_ROLE, _defaultAdmin);\\n        _setupRole(TRANSFER_ROLE, address(0));\\n\\n        emit PrimarySaleRecipientUpdated(_saleRecipient);\\n        emit PlatformFeeInfoUpdated(_platformFeeRecipient, _platformFeeBps);\\n        emit DefaultRoyalty(_royaltyRecipient, _royaltyBps);\\n    }\\n\\n    /// @dev Returns the module type of the contract.\\n    function contractType() external pure returns (bytes32) {\\n        return MODULE_TYPE;\\n    }\\n\\n    /// @dev Returns the version of the contract.\\n    function contractVersion() external pure returns (uint8) {\\n        return uint8(VERSION);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _owner) ? _owner : address(0);\\n    }\\n\\n    /// @dev Verifies that a mint request is signed by an account holding MINTER_ROLE (at the time of the function call).\\n    function verify(MintRequest calldata _req, bytes calldata _signature) public view returns (bool, address) {\\n        address signer = recoverAddress(_req, _signature);\\n        return (!minted[_req.uid] && hasRole(MINTER_ROLE, signer), signer);\\n    }\\n\\n    /// @dev Returns the URI for a tokenId\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n        return _tokenURI[_tokenId];\\n    }\\n\\n    /// @dev Lets an account with MINTER_ROLE mint an NFT.\\n    function mintTo(\\n        address _to,\\n        string calldata _uri,\\n        bool _secure,\\n        address _contractAddress\\n    ) external nonReentrant onlyRole(MINTER_ROLE) returns (uint256) {\\n        // `_mintTo` is re-used. `mintTo` just adds a minter role check.\\n        return _mintTo(_to, _uri, _secure, _contractAddress);\\n    }\\n\\n    ///     =====   External functions  =====\\n\\n    /// @dev See EIP-2981\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view virtual returns (address receiver, uint256 royaltyAmount) {\\n        (address recipient, uint256 bps) = getRoyaltyInfoForToken(tokenId);\\n        receiver = recipient;\\n        royaltyAmount = (salePrice * bps) / MAX_BPS;\\n    }\\n\\n    /// @dev Mints an NFT according to the provided mint request.\\n    function mintWithSignature(\\n        MintRequest calldata _req,\\n        bytes calldata _signature\\n    ) external payable nonReentrant returns (uint256 tokenIdMinted) {\\n        address signer = verifyRequest(_req, _signature);\\n        address receiver = _req.to;\\n\\n        tokenIdMinted = _mintTo(receiver, _req.uri, true, _req.to);\\n\\n        if (_req.royaltyRecipient != address(0)) {\\n            royaltyInfoForToken[tokenIdMinted] = RoyaltyInfo({\\n                recipient: _req.royaltyRecipient,\\n                bps: _req.royaltyBps\\n            });\\n        }\\n\\n        collectPrice(_req);\\n\\n        emit TokensMintedWithSignature(signer, receiver, tokenIdMinted, _req);\\n    }\\n\\n    //      =====   Setter functions  =====\\n\\n    /// @dev Lets a module admin set the default recipient of all primary sales.\\n    function setPrimarySaleRecipient(address _saleRecipient) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        primarySaleRecipient = _saleRecipient;\\n        emit PrimarySaleRecipientUpdated(_saleRecipient);\\n    }\\n\\n    /// @dev Lets a module admin update the royalty bps and recipient.\\n    function setDefaultRoyaltyInfo(\\n        address _royaltyRecipient,\\n        uint256 _royaltyBps\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_royaltyBps <= MAX_BPS, \\\"exceed royalty bps\\\");\\n\\n        royaltyRecipient = _royaltyRecipient;\\n        royaltyBps = uint128(_royaltyBps);\\n\\n        emit DefaultRoyalty(_royaltyRecipient, _royaltyBps);\\n    }\\n\\n    /// @dev Lets a module admin set the royalty recipient for a particular token Id.\\n    function setRoyaltyInfoForToken(\\n        uint256 _tokenId,\\n        address _recipient,\\n        uint256 _bps\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_bps <= MAX_BPS, \\\"exceed royalty bps\\\");\\n\\n        royaltyInfoForToken[_tokenId] = RoyaltyInfo({ recipient: _recipient, bps: _bps });\\n\\n        emit RoyaltyForToken(_tokenId, _recipient, _bps);\\n    }\\n\\n    /// @dev Lets a module admin update the fees on primary sales.\\n    function setPlatformFeeInfo(\\n        address _platformFeeRecipient,\\n        uint256 _platformFeeBps\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_platformFeeBps <= MAX_BPS, \\\"exceeds MAX_BPS\\\");\\n\\n        platformFeeBps = uint64(_platformFeeBps);\\n        platformFeeRecipient = _platformFeeRecipient;\\n\\n        emit PlatformFeeInfoUpdated(_platformFeeRecipient, _platformFeeBps);\\n    }\\n\\n    /// @dev Lets a module admin set a new owner for the contract. The new owner must be a module admin.\\n    function setOwner(address _newOwner) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _newOwner), \\\"new owner not module admin.\\\");\\n        address _prevOwner = _owner;\\n        _owner = _newOwner;\\n\\n        emit OwnerUpdated(_prevOwner, _newOwner);\\n    }\\n\\n    /// @dev Lets a module admin set the URI for contract-level metadata.\\n    function setContractURI(string calldata _uri) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        contractURI = _uri;\\n    }\\n\\n    ///     =====   Getter functions    =====\\n\\n    /// @dev Returns the platform fee bps and recipient.\\n    function getPlatformFeeInfo() external view returns (address, uint16) {\\n        return (platformFeeRecipient, uint16(platformFeeBps));\\n    }\\n\\n    /// @dev Returns the platform fee bps and recipient.\\n    function getDefaultRoyaltyInfo() external view returns (address, uint16) {\\n        return (royaltyRecipient, uint16(royaltyBps));\\n    }\\n\\n    /// @dev Returns the royalty recipient for a particular token Id.\\n    function getRoyaltyInfoForToken(uint256 _tokenId) public view returns (address, uint16) {\\n        RoyaltyInfo memory royaltyForToken = royaltyInfoForToken[_tokenId];\\n\\n        return\\n            royaltyForToken.recipient == address(0)\\n                ? (royaltyRecipient, uint16(royaltyBps))\\n                : (royaltyForToken.recipient, uint16(royaltyForToken.bps));\\n    }\\n\\n    ///     =====   Internal functions  =====\\n\\n    /// @dev Mints an NFT to `to`\\n    function _mintTo(\\n        address _to,\\n        string calldata _uri,\\n        bool _secure,\\n        address _contractAddress\\n    ) internal returns (uint256 tokenIdToMint) {\\n        tokenIdToMint = uint256(uint160(_contractAddress));\\n\\n        require(bytes(_uri).length > 0, \\\"empty uri.\\\");\\n        _setTokenURI(tokenIdToMint, _uri);\\n\\n        _safeMint(_to, tokenIdToMint);\\n\\n        // Get the hash of the deployed bytecode for the contract at the given address\\n        bytes32 codeHash;\\n        assembly {\\n            codeHash := extcodehash(_contractAddress)\\n        }\\n\\n        // Get the initialization code of the contract at the given address\\n        bytes memory initCode;\\n        assembly {\\n            let size := extcodesize(_contractAddress)\\n            initCode := mload(0x40)\\n            mstore(0x40, add(initCode, size))\\n            extcodecopy(_contractAddress, add(initCode, 0x20), 0, size)\\n            mstore(initCode, size)\\n        }\\n\\n        contracts[_contractAddress] = SecurityInfo({\\n            uri: _uri,\\n            hashBytecode: uint256(codeHash),\\n            hashInitData: uint256(keccak256(initCode)),\\n            secure: _secure,\\n            contractAddress: _contractAddress\\n        });\\n\\n        emit TokensMinted(_to, tokenIdToMint, _uri);\\n    }\\n\\n    /// @dev Updates the secure field of a token's SecurityInfo.\\n    function updateSecureField(address _contractAddress, bool _secure) external onlyRole(MINTER_ROLE) {\\n        SecurityInfo storage info = contracts[_contractAddress];\\n        require(info.contractAddress != address(0), \\\"Token does not exist\\\");\\n        info.secure = _secure;\\n    }\\n\\n    /// @dev Returns the address of the signer of the mint request.\\n    function recoverAddress(MintRequest calldata _req, bytes calldata _signature) private view returns (address) {\\n        return _hashTypedDataV4(keccak256(_encodeRequest(_req))).recover(_signature);\\n    }\\n\\n    /// @dev Resolves 'stack too deep' error in `recoverAddress`.\\n    function _encodeRequest(MintRequest calldata _req) private pure returns (bytes memory) {\\n        return\\n            abi.encode(\\n                TYPEHASH,\\n                _req.to,\\n                _req.royaltyRecipient,\\n                _req.royaltyBps,\\n                _req.primarySaleRecipient,\\n                keccak256(bytes(_req.uri)),\\n                _req.price,\\n                _req.currency,\\n                _req.validityStartTimestamp,\\n                _req.validityEndTimestamp,\\n                _req.uid\\n            );\\n    }\\n\\n    /// @dev Verifies that a mint request is valid.\\n    function verifyRequest(MintRequest calldata _req, bytes calldata _signature) internal returns (address) {\\n        (bool success, address signer) = verify(_req, _signature);\\n        require(success, \\\"invalid signature\\\");\\n\\n        require(\\n            _req.validityStartTimestamp <= block.timestamp && _req.validityEndTimestamp >= block.timestamp,\\n            \\\"request expired\\\"\\n        );\\n        require(_req.to != address(0), \\\"recipient undefined\\\");\\n\\n        minted[_req.uid] = true;\\n\\n        return signer;\\n    }\\n\\n    /// @dev Collects and distributes the primary sale value of tokens being claimed.\\n    function collectPrice(MintRequest calldata _req) internal {\\n        if (_req.price == 0) {\\n            require(msg.value == 0, \\\"!Value\\\");\\n            return;\\n        }\\n\\n        uint256 totalPrice = _req.price;\\n        uint256 platformFees = (totalPrice * platformFeeBps) / MAX_BPS;\\n\\n        if (_req.currency == CurrencyTransferLib.NATIVE_TOKEN) {\\n            require(msg.value == totalPrice, \\\"must send total price.\\\");\\n        } else {\\n            require(msg.value == 0, \\\"msg value not zero\\\");\\n        }\\n\\n        address saleRecipient = _req.primarySaleRecipient == address(0)\\n            ? primarySaleRecipient\\n            : _req.primarySaleRecipient;\\n\\n        CurrencyTransferLib.transferCurrency(_req.currency, _msgSender(), platformFeeRecipient, platformFees);\\n        CurrencyTransferLib.transferCurrency(_req.currency, _msgSender(), saleRecipient, totalPrice - platformFees);\\n    }\\n\\n    ///     =====   Low-level overrides  =====\\n\\n    /// @dev Burns `tokenId`. See {ERC721-_burn}.\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n\\n    /// @dev See {ERC721-_beforeTokenTransfer}.\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 batchSize\\n    ) internal virtual override(ERC721EnumerableUpgradeable) {\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n\\n        // if transfer is restricted on the contract, we still want to allow burning and minting\\n        if (!hasRole(TRANSFER_ROLE, address(0)) && from != address(0) && to != address(0)) {\\n            require(hasRole(TRANSFER_ROLE, from) || hasRole(TRANSFER_ROLE, to), \\\"restricted to TRANSFER_ROLE holders\\\");\\n        }\\n    }\\n\\n    /// @dev Returns whether metadata can be set in the given execution context.\\n    function _canSetMetadata() internal view virtual override returns (bool) {\\n        return hasRole(METADATA_ROLE, _msgSender());\\n    }\\n\\n    /// @dev Returns whether metadata can be frozen in the given execution context.\\n    function _canFreezeMetadata() internal view virtual override returns (bool) {\\n        return hasRole(METADATA_ROLE, _msgSender());\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(AccessControlEnumerableUpgradeable, ERC721EnumerableUpgradeable, IERC165Upgradeable, IERC165)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId) || interfaceId == type(IERC2981Upgradeable).interfaceId;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable, Multicall)\\n        returns (address sender)\\n    {\\n        return ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n\\n    /// @dev Override the approve function to check the whitelist\\n    function approve(address to, uint256 tokenId) public virtual override(ERC721Upgradeable, IERC721Upgradeable) {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    function verifyTokenAtAddress(address _contractAddress) external view returns (bool) {\\n        SecurityInfo storage info = contracts[_contractAddress];\\n        require(info.contractAddress != address(0), \\\"Token does not exist\\\");\\n\\n        // Get the hash of the deployed bytecode for the contract at the given address\\n        bytes32 codeHash;\\n        assembly {\\n            codeHash := extcodehash(_contractAddress)\\n        }\\n\\n        return uint256(codeHash) == info.hashBytecode;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x754f4379204ad4156728195c178404023086f8539b4a322903b316ef8e4217dd\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x7d24c901e098a04fa7f388c9ff1890bb522307272a2fee8030ee15a8d907096f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc8710577334e8d0799ae2b2a731b1924a7bddd64319da9787ddd2dc69bdd1ce5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x1a94069aa241fa1ebb4409d02a405c932d3ad7e875bdd5587c88244da210ccdf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xd6e2dc520133229f192493fc0a53c0cfb0cbcee1e45bf0817c34e416486d9359\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0xec028c77640f9fe3f2b954cbf999585abc938231a6ffeb469a1cc219b3d40dcc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x7077d7f3369b21f286840c0d69b09a8a6d3d6e522fff67bfc240fd0a6cdf178c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-712 is Final as of 2022-08-11. This file is deprecated.\\n\\nimport \\\"./EIP712Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x31a2e227f5653e4b31e0f680857b8842073d083b33df11b3f3b3bb5ddc10526e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd90d7723512df65ae417adaf0801042940f0dabd60039ceeaffe34aa5b238da1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/eip/interface/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/eip/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x458d6ffd4d79153b9bfca794efa8169bbb942b47723153e6d2b0051e2cd9dcf1\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/eip/interface/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x6a1ea21755c29a9f74e21176486902eb943f2f3aaa465b351b0c1b7c5794f5aa\",\"license\":\"Apache 2.0\"},\"@thirdweb-dev/contracts/eip/interface/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\ninterface IERC4906 is IERC165 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xa31c36a97c9133c8a451aaec1aa585537cacd71760eb6c5ce402155313efb392\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/eip/interface/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x00754fd93079350acb6b1d0451320cc4b4252bf7990aa39cde29abb5ca4a60ea\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/extension/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../lib/Address.sol\\\";\\nimport \\\"./interface/IMulticall.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\ncontract Multicall is IMulticall {\\n    /**\\n     *  @notice Receives and executes a batch of function calls on this contract.\\n     *  @dev Receives and executes a batch of function calls on this contract.\\n     *\\n     *  @param data The bytes data that makes up the batch of function calls to execute.\\n     *  @return results The bytes data that makes up the result of the batch of function calls executed.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        address sender = _msgSender();\\n        bool isForwarder = msg.sender != sender;\\n        for (uint256 i = 0; i < data.length; i++) {\\n            if (isForwarder) {\\n                results[i] = Address.functionDelegateCall(address(this), abi.encodePacked(data[i], sender));\\n            } else {\\n                results[i] = Address.functionDelegateCall(address(this), data[i]);\\n            }\\n        }\\n        return results;\\n    }\\n\\n    /// @notice Returns the sender in the given execution context.\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\",\"keccak256\":\"0xe4479833f6297a1461478733e14dd0e9b8376da474fa7067cb8937f9ccff2836\",\"license\":\"Apache 2.0\"},\"@thirdweb-dev/contracts/extension/NFTMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/INFTMetadata.sol\\\";\\n\\nabstract contract NFTMetadata is INFTMetadata {\\n    /// @dev The sender is not authorized to perform the action\\n    error NFTMetadataUnauthorized();\\n\\n    /// @dev Invalid token metadata url\\n    error NFTMetadataInvalidUrl();\\n\\n    /// @dev the nft metadata is frozen\\n    error NFTMetadataFrozen(uint256 tokenId);\\n\\n    bool public uriFrozen;\\n\\n    mapping(uint256 => string) internal _tokenURI;\\n\\n    /// @notice Returns the metadata URI for a given NFT.\\n    function _getTokenURI(uint256 _tokenId) internal view virtual returns (string memory) {\\n        return _tokenURI[_tokenId];\\n    }\\n\\n    /// @notice Sets the metadata URI for a given NFT.\\n    function _setTokenURI(uint256 _tokenId, string memory _uri) internal virtual {\\n        if (bytes(_uri).length == 0) {\\n            revert NFTMetadataInvalidUrl();\\n        }\\n        _tokenURI[_tokenId] = _uri;\\n\\n        emit MetadataUpdate(_tokenId);\\n    }\\n\\n    /// @notice Sets the metadata URI for a given NFT.\\n    function setTokenURI(uint256 _tokenId, string memory _uri) public virtual {\\n        if (!_canSetMetadata()) {\\n            revert NFTMetadataUnauthorized();\\n        }\\n        if (uriFrozen) {\\n            revert NFTMetadataFrozen(_tokenId);\\n        }\\n        _setTokenURI(_tokenId, _uri);\\n    }\\n\\n    function freezeMetadata() public virtual {\\n        if (!_canFreezeMetadata()) {\\n            revert NFTMetadataUnauthorized();\\n        }\\n        uriFrozen = true;\\n        emit MetadataFrozen();\\n    }\\n\\n    /// @dev Returns whether metadata can be set in the given execution context.\\n    function _canSetMetadata() internal view virtual returns (bool);\\n\\n    function _canFreezeMetadata() internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xc3fd17dbce31d2640912fdc0693ae27ff2b8c5e2ee0a6f6018bd2cedcbc14eda\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/extension/interface/IMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\ninterface IMulticall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/extension/interface/INFTMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../eip/interface/IERC4906.sol\\\";\\n\\ninterface INFTMetadata is IERC4906 {\\n    /// @dev This event emits when the metadata of all tokens are frozen.\\n    /// While not currently supported by marketplaces, this event allows\\n    /// future indexing if desired.\\n    event MetadataFrozen();\\n\\n    /// @notice Sets the metadata URI for a given NFT.\\n    function setTokenURI(uint256 _tokenId, string memory _uri) external;\\n\\n    /// @notice Freezes the metadata URI for a given NFT.\\n    function freezeMetadata() external;\\n}\\n\",\"keccak256\":\"0x5c3ebcaa3bb1a7f685d620acb0a0383239a326e719d3f9667790a71750391261\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/extension/interface/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *  who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\\n *  information about who the contract's owner is.\\n */\\n\\ninterface IOwnable {\\n    /// @dev Returns the owner of the contract.\\n    function owner() external view returns (address);\\n\\n    /// @dev Lets a module admin set a new owner for the contract. The new owner must be a module admin.\\n    function setOwner(address _newOwner) external;\\n\\n    /// @dev Emitted when a new Owner is set.\\n    event OwnerUpdated(address indexed prevOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/extension/interface/IPlatformFee.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `PlatformFee` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *  the recipient of platform fee and the platform fee basis points, and lets the inheriting contract perform conditional logic\\n *  that uses information about platform fees, if desired.\\n */\\n\\ninterface IPlatformFee {\\n    /// @dev Fee type variants: percentage fee and flat fee\\n    enum PlatformFeeType {\\n        Bps,\\n        Flat\\n    }\\n\\n    /// @dev Returns the platform fee bps and recipient.\\n    function getPlatformFeeInfo() external view returns (address, uint16);\\n\\n    /// @dev Lets a module admin update the fees on primary sales.\\n    function setPlatformFeeInfo(address _platformFeeRecipient, uint256 _platformFeeBps) external;\\n\\n    /// @dev Emitted when fee on primary sales is updated.\\n    event PlatformFeeInfoUpdated(address indexed platformFeeRecipient, uint256 platformFeeBps);\\n\\n    /// @dev Emitted when the flat platform fee is updated.\\n    event FlatPlatformFeeUpdated(address platformFeeRecipient, uint256 flatFee);\\n\\n    /// @dev Emitted when the platform fee type is updated.\\n    event PlatformFeeTypeUpdated(PlatformFeeType feeType);\\n}\\n\",\"keccak256\":\"0x8c23c2a223a3b94ccce125b418e5fabfb631695d927e336512bc8dca61bbc736\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/extension/interface/IPrimarySale.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `Primary` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *  the recipient of primary sales, and lets the inheriting contract perform conditional logic that uses information about\\n *  primary sales, if desired.\\n */\\n\\ninterface IPrimarySale {\\n    /// @dev The adress that receives all primary sales value.\\n    function primarySaleRecipient() external view returns (address);\\n\\n    /// @dev Lets a module admin set the default recipient of all primary sales.\\n    function setPrimarySaleRecipient(address _saleRecipient) external;\\n\\n    /// @dev Emitted when a new sale recipient is set.\\n    event PrimarySaleRecipientUpdated(address indexed recipient);\\n}\\n\",\"keccak256\":\"0x77c89cb8d9b781b0a08b1fa81c95a0dd5c19200b2fb0dc884c1084b931624004\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/extension/interface/IRoyalty.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../eip/interface/IERC2981.sol\\\";\\n\\n/**\\n *  Thirdweb's `Royalty` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *  the recipient of royalty fee and the royalty fee basis points, and lets the inheriting contract perform conditional logic\\n *  that uses information about royalty fees, if desired.\\n *\\n *  The `Royalty` contract is ERC2981 compliant.\\n */\\n\\ninterface IRoyalty is IERC2981 {\\n    struct RoyaltyInfo {\\n        address recipient;\\n        uint256 bps;\\n    }\\n\\n    /// @dev Returns the royalty recipient and fee bps.\\n    function getDefaultRoyaltyInfo() external view returns (address, uint16);\\n\\n    /// @dev Lets a module admin update the royalty bps and recipient.\\n    function setDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) external;\\n\\n    /// @dev Lets a module admin set the royalty recipient for a particular token Id.\\n    function setRoyaltyInfoForToken(uint256 tokenId, address recipient, uint256 bps) external;\\n\\n    /// @dev Returns the royalty recipient for a particular token Id.\\n    function getRoyaltyInfoForToken(uint256 tokenId) external view returns (address, uint16);\\n\\n    /// @dev Emitted when royalty info is updated.\\n    event DefaultRoyalty(address indexed newRoyaltyRecipient, uint256 newRoyaltyBps);\\n\\n    /// @dev Emitted when royalty recipient for tokenId is set\\n    event RoyaltyForToken(uint256 indexed tokenId, address indexed royaltyRecipient, uint256 royaltyBps);\\n}\\n\",\"keccak256\":\"0x06f66ba14674e2396219fb361486d43e6059933114a54c26b6e01dc3bf794f0d\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/external-deps/openzeppelin/metatx/ERC2771ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771ContextUpgradeable is Initializable, ContextUpgradeable {\\n    mapping(address => bool) private _trustedForwarder;\\n\\n    function __ERC2771Context_init(address[] memory trustedForwarder) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC2771Context_init_unchained(trustedForwarder);\\n    }\\n\\n    function __ERC2771Context_init_unchained(address[] memory trustedForwarder) internal onlyInitializing {\\n        for (uint256 i = 0; i < trustedForwarder.length; i++) {\\n            _trustedForwarder[trustedForwarder[i]] = true;\\n        }\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return _trustedForwarder[forwarder];\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xdbc96b1264d2e2bd82cb7e697056929325e09d1641321145a8cec53b22b9567d\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/external-deps/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../../../eip/interface/IERC20.sol\\\";\\nimport { Address } from \\\"../../../../../lib/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87a5e71a483d7904e96e5eb050220207c79421cb36d6d56d3017636e0a17d4d6\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/infra/interface/IThirdwebContract.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\ninterface IThirdwebContract {\\n    /// @dev Returns the module type of the contract.\\n    function contractType() external pure returns (bytes32);\\n\\n    /// @dev Returns the version of the contract.\\n    function contractVersion() external pure returns (uint8);\\n\\n    /// @dev Returns the metadata URI of the contract.\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     *  @dev Sets contract URI for the storefront-level metadata of the contract.\\n     *       Only module admin can call this function.\\n     */\\n    function setContractURI(string calldata _uri) external;\\n}\\n\",\"keccak256\":\"0x98ea2478723e7fd94c44f498f78e75076d306aa716ff255adf55bda2822c1e78\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/infra/interface/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x5c1df76e8c1d9b5c069e4c0e35c3ad3316530c382fe3ddc6c21584f5e56f0a7b\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.1;\\n\\n/// @author thirdweb, OpenZeppelin Contracts (v4.9.0)\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e2c06c07422ce6f27ab1c4d4ce62bdc3200e082b735b5e3a75c2e7b61cbc4f\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/lib/CurrencyTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n// Helper interfaces\\nimport { IWETH } from \\\"../infra/interface/IWETH.sol\\\";\\nimport { SafeERC20, IERC20 } from \\\"../external-deps/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary CurrencyTransferLib {\\n    using SafeERC20 for IERC20;\\n\\n    error CurrencyTransferLibMismatchedValue(uint256 expected, uint256 actual);\\n    error CurrencyTransferLibFailedNativeTransfer(address recipient, uint256 value);\\n\\n    /// @dev The address interpreted as native token of the chain.\\n    address public constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @dev Transfers a given amount of currency.\\n    function transferCurrency(address _currency, address _from, address _to, uint256 _amount) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        if (_currency == NATIVE_TOKEN) {\\n            safeTransferNativeToken(_to, _amount);\\n        } else {\\n            safeTransferERC20(_currency, _from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfers a given amount of currency. (With native token wrapping)\\n    function transferCurrencyWithWrapper(\\n        address _currency,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        address _nativeTokenWrapper\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        if (_currency == NATIVE_TOKEN) {\\n            if (_from == address(this)) {\\n                // withdraw from weth then transfer withdrawn native token to recipient\\n                IWETH(_nativeTokenWrapper).withdraw(_amount);\\n                safeTransferNativeTokenWithWrapper(_to, _amount, _nativeTokenWrapper);\\n            } else if (_to == address(this)) {\\n                // store native currency in weth\\n                if (_amount != msg.value) {\\n                    revert CurrencyTransferLibMismatchedValue(msg.value, _amount);\\n                }\\n                IWETH(_nativeTokenWrapper).deposit{ value: _amount }();\\n            } else {\\n                safeTransferNativeTokenWithWrapper(_to, _amount, _nativeTokenWrapper);\\n            }\\n        } else {\\n            safeTransferERC20(_currency, _from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount` of ERC20 token from `from` to `to`.\\n    function safeTransferERC20(address _currency, address _from, address _to, uint256 _amount) internal {\\n        if (_from == _to) {\\n            return;\\n        }\\n\\n        if (_from == address(this)) {\\n            IERC20(_currency).safeTransfer(_to, _amount);\\n        } else {\\n            IERC20(_currency).safeTransferFrom(_from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfers `amount` of native token to `to`.\\n    function safeTransferNativeToken(address to, uint256 value) internal {\\n        // solhint-disable avoid-low-level-calls\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{ value: value }(\\\"\\\");\\n        if (!success) {\\n            revert CurrencyTransferLibFailedNativeTransfer(to, value);\\n        }\\n    }\\n\\n    /// @dev Transfers `amount` of native token to `to`. (With native token wrapping)\\n    function safeTransferNativeTokenWithWrapper(address to, uint256 value, address _nativeTokenWrapper) internal {\\n        // solhint-disable avoid-low-level-calls\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{ value: value }(\\\"\\\");\\n        if (!success) {\\n            IWETH(_nativeTokenWrapper).deposit{ value: value }();\\n            IERC20(_nativeTokenWrapper).safeTransfer(to, value);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x92d751d69f2bda27379e1dd903eb4fbdd7cbaa1bce4bebe492405b9bb9a04395\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/lib/FeeType.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\n/// @author thirdweb\\n\\nlibrary FeeType {\\n    uint256 internal constant PRIMARY_SALE = 0;\\n    uint256 internal constant MARKET_SALE = 1;\\n    uint256 internal constant SPLIT = 2;\\n}\\n\",\"keccak256\":\"0xf796f4f6126beb66821215c7bd0477c9aa39c986ba44a2001158f03e21b49381\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061543a806100206000396000f3fe6080604052600436106103015760003560e01c80636352211e11610191578063aaa3017a116100e2578063cb2ef6f711610090578063cb2ef6f7146109ed578063d111515d14610a11578063d45573f614610a26578063d539139314610a5c578063d547741f14610a7e578063e8a3d48514610a9e578063e985e9c514610ab3578063eb13554f14610ad357600080fd5b8063aaa3017a146108d2578063ac9650d814610911578063b24f2d391461093e578063b507c0161461096d578063b88d4fde1461098d578063c87b56dd146109ad578063ca15c873146109cd57600080fd5b806391d148541161013f57806391d148541461080c578063938e3d7b1461082c57806395d89b411461084c5780639bcf7a1514610861578063a0a8e46014610881578063a217fddf1461089d578063a22cb465146108b257600080fd5b80636352211e1461071e57806369dc9ff31461073e5780636f4f28371461076f57806370a082311461078f57806384b0196e146107af5780638da5cb5b146107d75780639010d07c146107ec57600080fd5b8063274e4a1d116102565780633b1475a7116102045780633b1475a7146105ec57806342842e0e1461060357806342966c68146106235780634cc157df146106435780634f6ccce71461068557806355eea188146106a5578063572b6c05146106c5578063600dd5ea146106fe57600080fd5b8063274e4a1d146105015780632a55205a1461051c5780632af6f6021461054a5780632f2ff15d1461056a5780632f745c591461058a57806336568abe146105aa57806338841782146105ca57600080fd5b8063164cb856116102b3578063164cb85614610418578063166c10661461043857806318160ddd146104595780631e7ac4881461046f578063206b60f91461048f57806323b872dd146104b1578063248a9ca3146104d157600080fd5b806301ffc9a71461030657806306fdde031461033b578063079fe40e1461035d578063081812fc14610396578063095ea7b3146103b657806313af4035146103d8578063162094c4146103f8575b600080fd5b34801561031257600080fd5b50610326610321366004614416565b610af4565b60405190151581526020015b60405180910390f35b34801561034757600080fd5b50610350610b20565b604051610332919061448b565b34801561036957600080fd5b506101ca5461037e906001600160a01b031681565b6040516001600160a01b039091168152602001610332565b3480156103a257600080fd5b5061037e6103b136600461449e565b610bb3565b3480156103c257600080fd5b506103d66103d13660046144d3565b610bdb565b005b3480156103e457600080fd5b506103d66103f33660046144fd565b610d08565b34801561040457600080fd5b506103d66104133660046145d5565b610dbe565b34801561042457600080fd5b506103266104333660046144fd565b610e19565b61044b61044636600461465c565b610e6c565b604051908152602001610332565b34801561046557600080fd5b506101955461044b565b34801561047b57600080fd5b506103d661048a3660046144d3565b610fa6565b34801561049b57600080fd5b5061044b60008051602061535e83398151915281565b3480156104bd57600080fd5b506103d66104cc3660046146cd565b61104c565b3480156104dd57600080fd5b5061044b6104ec36600461449e565b600090815260fd602052604090206001015490565b34801561050d57600080fd5b506101c5546103269060ff1681565b34801561052857600080fd5b5061053c610537366004614709565b611084565b60405161033292919061472b565b34801561055657600080fd5b506103d66105653660046147d6565b6110c1565b34801561057657600080fd5b506103d66105853660046148ff565b61146a565b34801561059657600080fd5b5061044b6105a53660046144d3565b61148f565b3480156105b657600080fd5b506103d66105c53660046148ff565b611526565b3480156105d657600080fd5b5061044b60008051602061537e83398151915281565b3480156105f857600080fd5b5061044b6101c95481565b34801561060f57600080fd5b506103d661061e3660046146cd565b6115b0565b34801561062f57600080fd5b506103d661063e36600461449e565b6115cb565b34801561064f57600080fd5b5061066361065e36600461449e565b611647565b604080516001600160a01b03909316835261ffff909116602083015201610332565b34801561069157600080fd5b5061044b6106a036600461449e565b6116b7565b3480156106b157600080fd5b5061044b6106c0366004614944565b61174c565b3480156106d157600080fd5b506103266106e03660046144fd565b6001600160a01b031660009081526099602052604090205460ff1690565b34801561070a57600080fd5b506103d66107193660046144d3565b611790565b34801561072a57600080fd5b5061037e61073936600461449e565b611828565b34801561074a57600080fd5b5061075e6107593660046144fd565b61185e565b6040516103329594939291906149ba565b34801561077b57600080fd5b506103d661078a3660046144fd565b611924565b34801561079b57600080fd5b5061044b6107aa3660046144fd565b61197b565b3480156107bb57600080fd5b506107c4611a02565b60405161033297969594939291906149fa565b3480156107e357600080fd5b5061037e611aa0565b3480156107f857600080fd5b5061037e610807366004614709565b611ad8565b34801561081857600080fd5b506103266108273660046148ff565b611af1565b34801561083857600080fd5b506103d6610847366004614a90565b611b1c565b34801561085857600080fd5b50610350611b3a565b34801561086d57600080fd5b506103d661087c366004614ad1565b611b4a565b34801561088d57600080fd5b5060405160018152602001610332565b3480156108a957600080fd5b5061044b600081565b3480156108be57600080fd5b506103d66108cd366004614af6565b611bfe565b3480156108de57600080fd5b506108f26108ed36600461465c565b611c10565b6040805192151583526001600160a01b03909116602083015201610332565b34801561091d57600080fd5b5061093161092c366004614b2d565b611c67565b6040516103329190614ba1565b34801561094a57600080fd5b506101cc546101cd546001600160a01b03909116906001600160801b0316610663565b34801561097957600080fd5b506103d6610988366004614af6565b611ded565b34801561099957600080fd5b506103d66109a8366004614c03565b611e60565b3480156109b957600080fd5b506103506109c836600461449e565b611e99565b3480156109d957600080fd5b5061044b6109e836600461449e565b611f3c565b3480156109f957600080fd5b506d455243373231536563757269747960901b61044b565b348015610a1d57600080fd5b506103d6611f54565b348015610a3257600080fd5b506101cb546101cd546001600160a01b0390911690600160801b90046001600160801b0316610663565b348015610a6857600080fd5b5061044b6000805160206153c583398151915281565b348015610a8a57600080fd5b506103d6610a993660046148ff565b611fb2565b348015610aaa57600080fd5b50610350611fd7565b348015610abf57600080fd5b50610326610ace366004614c7e565b612066565b348015610adf57600080fd5b506101cb5461037e906001600160a01b031681565b6000610aff82612095565b80610b1a57506001600160e01b0319821663152a902d60e11b145b92915050565b60606101618054610b3090614ca8565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5c90614ca8565b8015610ba95780601f10610b7e57610100808354040283529160200191610ba9565b820191906000526020600020905b815481529060010190602001808311610b8c57829003601f168201915b5050505050905090565b6000610bbe826120ba565b50600090815261016560205260409020546001600160a01b031690565b6000610be682611828565b9050806001600160a01b0316836001600160a01b03161415610c595760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b806001600160a01b0316610c6b6120df565b6001600160a01b03161480610c875750610c8781610ace6120df565b610cf95760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610c50565b610d0383836120e9565b505050565b6000610d1381612158565b610d1e600083611af1565b610d6a5760405162461bcd60e51b815260206004820152601b60248201527f6e6577206f776e6572206e6f74206d6f64756c652061646d696e2e00000000006044820152606401610c50565b6101c880546001600160a01b038481166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a3505050565b610dc6612169565b610de3576040516318c4c13760e21b815260040160405180910390fd5b6101c55460ff1615610e0b576040516393dafeb760e01b815260048101839052602401610c50565b610e158282612185565b5050565b6001600160a01b0380821660009081526101c760205260408120600381015491929091610100900416610e5e5760405162461bcd60e51b8152600401610c5090614ce3565b60010154913f909114919050565b6000610e766121fc565b6000610e83858585612256565b90506000610e9460208701876144fd565b9050610ebb81610ea76080890189614d11565b6001610eb660208c018c6144fd565b6123b2565b92506000610ecf60408801602089016144fd565b6001600160a01b031614610f3f576040518060400160405280876020016020810190610efb91906144fd565b6001600160a01b03908116825260408981013560209384015260008781526101d0845220835181546001600160a01b03191692169190911781559101516001909101555b610f488661258b565b82816001600160a01b0316836001600160a01b03167f15fb5f25e8ebed9eee6472747d42b9a3cf11ecf1a51cd0ebb83652e895552f3189604051610f8c9190614dc5565b60405180910390a45050610f9f60018055565b9392505050565b6000610fb181612158565b612710821115610fd35760405162461bcd60e51b8152600401610c5090614f19565b6101cd80546001600160801b03166001600160401b038416600160801b021790556101cb80546001600160a01b0319166001600160a01b0385169081179091556040518381527fe2497bd806ec41a6e0dd992c29a72efc0ef8fec9092d1978fd4a1e00b2f18304906020015b60405180910390a2505050565b61105d6110576120df565b8261276b565b6110795760405162461bcd60e51b8152600401610c5090614f42565b610d038383836127ca565b60008060008061109386611647565b90945084925061ffff1690506127106110ac8287614fa5565b6110b69190614fc4565b925050509250929050565b600054610100900460ff16158080156110e15750600054600160ff909116105b806110fb5750303b1580156110fb575060005460ff166001145b61115e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c50565b6000805460ff191660011790558015611181576000805461ff0019166101001790555b61118961292c565b6111cf6040518060400160405280600b81526020016a546f6b656e45524337323160a81b815250604051806040016040528060018152602001603160f81b81525061295d565b6111d88761298e565b6111e28a8a6129c6565b6101cc80546001600160a01b03199081166001600160a01b03888116919091179092556101cd80546001600160801b0319166001600160801b0388161790556101cb805482168584161790556101ca80549091169188169190911790558751611253906101ce9060208b01906142f7565b50612710836001600160801b0316111561127f5760405162461bcd60e51b8152600401610c5090614f19565b6101cd80546001600160801b03808616600160801b0291161790556101c880546001600160a01b038e166001600160a01b03199091161790556112c360008d6129f7565b6112db6000805160206153c58339815191528d6129f7565b6112f36000805160206153c58339815191528c6129f7565b61130b60008051602061537e8339815191528d6129f7565b61132360008051602061537e83398151915280612a01565b61133b60008051602061535e8339815191528d6129f7565b61135460008051602061535e83398151915260006129f7565b6040516001600160a01b038716907f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a26040516001600160801b03841681526001600160a01b038316907fe2497bd806ec41a6e0dd992c29a72efc0ef8fec9092d1978fd4a1e00b2f183049060200160405180910390a26040516001600160801b03851681526001600160a01b038616907f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a2801561145c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050505050565b600082815260fd602052604090206001015461148581612158565b610d038383612a4c565b600061149a8361197b565b82106114fc5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610c50565b506001600160a01b0391909116600090815261019360209081526040808320938352929052205490565b61152e6120df565b6001600160a01b0316816001600160a01b0316146115a65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610c50565b610e158282612a6f565b610d0383838360405180602001604052806000815250611e60565b6115d66110576120df565b61163b5760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610c50565b61164481612a92565b50565b60008181526101d060209081526040808320815180830190925280546001600160a01b03168083526001909101549282019290925282911561168f57805160208201516116ad565b6101cc546101cd546001600160a01b03909116906001600160801b03165b9250925050915091565b60006116c36101955490565b82106117265760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610c50565b610195828154811061173a5761173a614fe6565b90600052602060002001549050919050565b60006117566121fc565b6000805160206153c583398151915261176e81612158565b61177b87878787876123b2565b91505061178760018055565b95945050505050565b600061179b81612158565b6127108211156117bd5760405162461bcd60e51b8152600401610c5090614ffc565b6101cc80546001600160a01b0319166001600160a01b0385169081179091556101cd80546001600160801b0319166001600160801b0385161790556040518381527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200161103f565b600081815261016360205260408120546001600160a01b031680610b1a5760405162461bcd60e51b8152600401610c5090615028565b6101c76020526000908152604090208054819061187a90614ca8565b80601f01602080910402602001604051908101604052809291908181526020018280546118a690614ca8565b80156118f35780601f106118c8576101008083540402835291602001916118f3565b820191906000526020600020905b8154815290600101906020018083116118d657829003601f168201915b50505050600183015460028401546003909401549293909290915060ff81169061010090046001600160a01b031685565b600061192f81612158565b6101ca80546001600160a01b0319166001600160a01b0384169081179091556040517f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a25050565b60006001600160a01b0382166119e55760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610c50565b506001600160a01b03166000908152610164602052604090205490565b6000606080600080600060606033546000801b148015611a225750603454155b611a665760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b6044820152606401610c50565b611a6e612b26565b611a76612b35565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6101c854600090611abb9082906001600160a01b0316611af1565b611ac55750600090565b6101c8546001600160a01b03165b905090565b600082815261012f60205260408120610f9f9083612b44565b600091825260fd602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000611b2781612158565b611b346101ce8484614377565b50505050565b60606101628054610b3090614ca8565b6000611b5581612158565b612710821115611b775760405162461bcd60e51b8152600401610c5090614ffc565b6040805180820182526001600160a01b03858116808352602080840187815260008a81526101d08352869020945185546001600160a01b031916941693909317845591516001909301929092559151848152909186917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d910160405180910390a350505050565b610e15611c096120df565b8383612b50565b6000806000611c20868686612c1c565b61012087013560009081526101cf602052604090205490915060ff16158015611c5c5750611c5c6000805160206153c583398151915282611af1565b969095509350505050565b6060816001600160401b03811115611c8157611c81614518565b604051908082528060200260200182016040528015611cb457816020015b6060815260200190600190039081611c9f5790505b5090506000611cc16120df565b9050336001600160a01b038216141560005b84811015611de4578115611d5257611d3030878784818110611cf757611cf7614fe6565b9050602002810190611d099190614d11565b86604051602001611d1c9392919061505a565b604051602081830303815290604052612c78565b848281518110611d4257611d42614fe6565b6020026020010181905250611dd2565b611db430878784818110611d6857611d68614fe6565b9050602002810190611d7a9190614d11565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612c7892505050565b848281518110611dc657611dc6614fe6565b60200260200101819052505b80611ddc81615080565b915050611cd3565b50505092915050565b6000805160206153c5833981519152611e0581612158565b6001600160a01b0380841660009081526101c7602052604090206003810154909161010090910416611e495760405162461bcd60e51b8152600401610c5090614ce3565b600301805460ff1916921515929092179091555050565b611e71611e6b6120df565b8361276b565b611e8d5760405162461bcd60e51b8152600401610c5090614f42565b611b3484848484612c9d565b60008181526101c660205260409020805460609190611eb790614ca8565b80601f0160208091040260200160405190810160405280929190818152602001828054611ee390614ca8565b8015611f305780601f10611f0557610100808354040283529160200191611f30565b820191906000526020600020905b815481529060010190602001808311611f1357829003601f168201915b50505050509050919050565b600081815261012f60205260408120610b1a90612cd0565b611f5c612169565b611f79576040516318c4c13760e21b815260040160405180910390fd5b6101c5805460ff191660011790556040517feef043febddf4e1d1cf1f72ff1407b84e036e805aa0934418cb82095da8d716490600090a1565b600082815260fd6020526040902060010154611fcd81612158565b610d038383612a6f565b6101ce8054611fe590614ca8565b80601f016020809104026020016040519081016040528092919081815260200182805461201190614ca8565b801561205e5780601f106120335761010080835404028352916020019161205e565b820191906000526020600020905b81548152906001019060200180831161204157829003601f168201915b505050505081565b6001600160a01b0391821660009081526101666020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663780e9d6360e01b1480610b1a5750610b1a82612cda565b6120c381612d1a565b6116445760405162461bcd60e51b8152600401610c5090615028565b6000611ad3612d38565b60008181526101656020526040902080546001600160a01b0319166001600160a01b038416908117909155819061211f82611828565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611644816121646120df565b612d62565b6000611ad360008051602061537e8339815191526108276120df565b80516121a45760405163a094836b60e01b815260040160405180910390fd5b60008281526101c66020908152604090912082516121c4928401906142f7565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b6002600154141561224f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c50565b6002600155565b6000806000612266868686611c10565b91509150816122ab5760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b6044820152606401610c50565b426122bd610100880160e0890161509b565b6001600160801b0316111580156122ee5750426122e26101208801610100890161509b565b6001600160801b031610155b61232c5760405162461bcd60e51b815260206004820152600f60248201526e1c995c5d595cdd08195e1c1a5c9959608a1b6044820152606401610c50565b600061233b60208801886144fd565b6001600160a01b031614156123885760405162461bcd60e51b81526020600482015260136024820152721c9958da5c1a595b9d081d5b9919599a5b9959606a1b6044820152606401610c50565b61012086013560009081526101cf60205260409020805460ff191660011790559150509392505050565b6001600160a01b038116836123f65760405162461bcd60e51b815260206004820152600a60248201526932b6b83a3c903ab9349760b11b6044820152606401610c50565b6124368186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061218592505050565b6124408682612dbb565b60408051833b818101909252833f9180600060208401873c81526040805160c06020601f8a01819004028201810190925260a0810188815290918291908a908a90819085018382808284376000920182905250938552505050602080830186905284518582012060408085019190915289151560608501526001600160a01b03891660809094018490529282526101c781529190208251805191926124ea928492909101906142f7565b506020820151600182015560408083015160028301556060830151600390920180546080909401516001600160a81b0319909416921515610100600160a81b031916929092176101006001600160a01b0394851602179091555184918a16907f9d89e36eadf856db0ad9ffb5a569e07f95634dddd9501141ecf04820484ad0dc90612578908b908b906150b6565b60405180910390a3505095945050505050565b60a08101356125cb5734156116445760405162461bcd60e51b81526020600482015260066024820152652156616c756560d01b6044820152606401610c50565b6101cd5460a082013590600090612710906125f690600160801b90046001600160801b031684614fa5565b6126009190614fc4565b905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61262760e0850160c086016144fd565b6001600160a01b031614156126835781341461267e5760405162461bcd60e51b815260206004820152601660248201527536bab9ba1039b2b732103a37ba30b610383934b1b29760511b6044820152606401610c50565b6126c6565b34156126c65760405162461bcd60e51b81526020600482015260126024820152716d73672076616c7565206e6f74207a65726f60701b6044820152606401610c50565b6000806126d960808601606087016144fd565b6001600160a01b0316146126fc576126f760808501606086016144fd565b61270a565b6101ca546001600160a01b03165b905061273a61271f60e0860160c087016144fd565b6127276120df565b6101cb546001600160a01b031685612dd5565b611b3461274d60e0860160c087016144fd565b6127556120df565b8361276086886150ca565b612dd5565b60018055565b60008061277783611828565b9050806001600160a01b0316846001600160a01b0316148061279e575061279e8185612066565b806127c25750836001600160a01b03166127b784610bb3565b6001600160a01b0316145b949350505050565b826001600160a01b03166127dd82611828565b6001600160a01b0316146128035760405162461bcd60e51b8152600401610c50906150e1565b6001600160a01b0382166128655760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610c50565b6128728383836001612e1f565b826001600160a01b031661288582611828565b6001600160a01b0316146128ab5760405162461bcd60e51b8152600401610c50906150e1565b60008181526101656020908152604080832080546001600160a01b03199081169091556001600160a01b03878116808652610164855283862080546000190190559087168086528386208054600101905586865261016390945282852080549092168417909155905184936000805160206153e583398151915291a4505050565b600054610100900460ff166129535760405162461bcd60e51b8152600401610c5090615126565b61295b612f00565b565b600054610100900460ff166129845760405162461bcd60e51b8152600401610c5090615126565b610e158282612f27565b600054610100900460ff166129b55760405162461bcd60e51b8152600401610c5090615126565b6129bd612f84565b61164481612fab565b600054610100900460ff166129ed5760405162461bcd60e51b8152600401610c5090615126565b610e15828261303a565b610e158282612a4c565b600082815260fd6020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b612a56828261308a565b600082815261012f60205260409020610d039082613111565b612a798282613126565b600082815261012f60205260409020610d0390826131ab565b6000612a9d82611828565b9050612aad816000846001612e1f565b612ab682611828565b60008381526101656020908152604080832080546001600160a01b03199081169091556001600160a01b03851680855261016484528285208054600019019055878552610163909352818420805490911690555192935084926000805160206153e5833981519152908390a45050565b606060358054610b3090614ca8565b606060368054610b3090614ca8565b6000610f9f83836131c0565b816001600160a01b0316836001600160a01b03161415612bae5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610c50565b6001600160a01b0383811660008181526101666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60006127c283838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612c729250612c6691508890506131ea565b80519060200120613324565b90613351565b6060610f9f838360405180606001604052806027815260200161539e60279139613375565b612ca88484846127ca565b612cb4848484846133ed565b611b345760405162461bcd60e51b8152600401610c5090615171565b6000610b1a825490565b60006001600160e01b031982166380ac58cd60e01b1480612d0b57506001600160e01b03198216635b5e139f60e01b145b80610b1a5750610b1a826134f2565b600090815261016360205260409020546001600160a01b0316151590565b3360009081526099602052604081205460ff1615612d5d575060131936013560601c90565b503390565b612d6c8282611af1565b610e1557612d7981613517565b612d84836020613529565b604051602001612d959291906151c3565b60408051601f198184030181529082905262461bcd60e51b8252610c509160040161448b565b610e158282604051806020016040528060008152506136c4565b80612ddf57611b34565b6001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415612e1357612e0e82826136f7565b611b34565b611b348484848461376f565b612e2b848484846137c8565b612e4460008051602061535e8339815191526000611af1565b158015612e5957506001600160a01b03841615155b8015612e6d57506001600160a01b03831615155b15611b3457612e8a60008051602061535e83398151915285611af1565b80612ea85750612ea860008051602061535e83398151915284611af1565b611b345760405162461bcd60e51b815260206004820152602360248201527f7265737472696374656420746f205452414e534645525f524f4c4520686f6c6460448201526265727360e81b6064820152608401610c50565b600054610100900460ff166127655760405162461bcd60e51b8152600401610c5090615126565b600054610100900460ff16612f4e5760405162461bcd60e51b8152600401610c5090615126565b8151612f619060359060208501906142f7565b508051612f759060369060208401906142f7565b50506000603381905560345550565b600054610100900460ff1661295b5760405162461bcd60e51b8152600401610c5090615126565b600054610100900460ff16612fd25760405162461bcd60e51b8152600401610c5090615126565b60005b8151811015610e1557600160996000848481518110612ff657612ff6614fe6565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061303281615080565b915050612fd5565b600054610100900460ff166130615760405162461bcd60e51b8152600401610c5090615126565b8151613075906101619060208501906142f7565b508051610d03906101629060208401906142f7565b6130948282611af1565b610e1557600082815260fd602090815260408083206001600160a01b03851684529091529020805460ff191660011790556130cd6120df565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610f9f836001600160a01b0384166138fe565b6131308282611af1565b15610e1557600082815260fd602090815260408083206001600160a01b03851684529091529020805460ff191690556131676120df565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000610f9f836001600160a01b03841661394d565b60008260000182815481106131d7576131d7614fe6565b9060005260206000200154905092915050565b60607f86633b4ffa94b7c3d316ca70d7d2700f3fdfa7a7806efd31499b513d9176692e61321a60208401846144fd565b61322a60408501602086016144fd565b604085013561323f60808701606088016144fd565b61324c6080880188614d11565b60405161325a929190615232565b60405190819003902060a088013561327860e08a0160c08b016144fd565b6132896101008b0160e08c0161509b565b61329b6101208c016101008d0161509b565b60408051602081019b909b526001600160a01b03998a16908b015296881660608a0152608089019590955292861660a088015260c087019190915260e08601529092166101008401526001600160801b03918216610120808501919091529116610140830152830135610160820152610180016040516020818303038152906040529050919050565b6000610b1a613331613a40565b8360405161190160f01b8152600281019290925260228201526042902090565b60008060006133608585613a4a565b9150915061336d81613a90565b509392505050565b6060600080856001600160a01b0316856040516133929190615242565b600060405180830381855af49150503d80600081146133cd576040519150601f19603f3d011682016040523d82523d6000602084013e6133d2565b606091505b50915091506133e386838387613bd9565b9695505050505050565b60006001600160a01b0384163b156134e757836001600160a01b031663150b7a026134166120df565b8786866040518563ffffffff1660e01b8152600401613438949392919061525e565b6020604051808303816000875af1925050508015613473575060408051601f3d908101601f1916820190925261347091810190615291565b60015b6134cd573d8080156134a1576040519150601f19603f3d011682016040523d82523d6000602084013e6134a6565b606091505b5080516134c55760405162461bcd60e51b8152600401610c5090615171565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506127c2565b506001949350505050565b60006001600160e01b03198216635a05180f60e01b1480610b1a5750610b1a82613c4f565b6060610b1a6001600160a01b03831660145b60606000613538836002614fa5565b6135439060026152ae565b6001600160401b0381111561355a5761355a614518565b6040519080825280601f01601f191660200182016040528015613584576020820181803683370190505b509050600360fc1b8160008151811061359f5761359f614fe6565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106135ce576135ce614fe6565b60200101906001600160f81b031916908160001a90535060006135f2846002614fa5565b6135fd9060016152ae565b90505b6001811115613675576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061363157613631614fe6565b1a60f81b82828151811061364757613647614fe6565b60200101906001600160f81b031916908160001a90535060049490941c9361366e816152c6565b9050613600565b508315610f9f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c50565b6136ce8383613c84565b6136db60008484846133ed565b610d035760405162461bcd60e51b8152600401610c5090615171565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613744576040519150601f19603f3d011682016040523d82523d6000602084013e613749565b606091505b5050905080610d03578282604051635fdc4ec160e11b8152600401610c5092919061472b565b816001600160a01b0316836001600160a01b0316141561378e57611b34565b6001600160a01b0383163014156137b357612e0e6001600160a01b0385168383613d8f565b611b346001600160a01b038516848484613de5565b60018111156138375760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610c50565b816001600160a01b03851661389557613890816101958054600083815261019660205260408120829055600182018355919091527f54034dca961b61bc2a3147cc0c1986762915b42723ed64155364f17a2e2967700155565b6138b8565b836001600160a01b0316856001600160a01b0316146138b8576138b88582613e1d565b6001600160a01b0384166138d4576138cf81613ebf565b6138f7565b846001600160a01b0316846001600160a01b0316146138f7576138f78482613f74565b5050505050565b600081815260018301602052604081205461394557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b1a565b506000610b1a565b60008181526001830160205260408120548015613a365760006139716001836150ca565b8554909150600090613985906001906150ca565b90508181146139ea5760008660000182815481106139a5576139a5614fe6565b90600052602060002001549050808760000184815481106139c8576139c8614fe6565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806139fb576139fb6152dd565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b1a565b6000915050610b1a565b6000611ad3613fba565b600080825160411415613a815760208301516040840151606085015160001a613a758782858561402e565b94509450505050613a89565b506000905060025b9250929050565b6000816004811115613aa457613aa46152f3565b1415613aad5750565b6001816004811115613ac157613ac16152f3565b1415613b0a5760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610c50565b6002816004811115613b1e57613b1e6152f3565b1415613b6c5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610c50565b6003816004811115613b8057613b806152f3565b14156116445760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610c50565b60608315613c45578251613c3e576001600160a01b0385163b613c3e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c50565b50816127c2565b6127c283836140e8565b60006001600160e01b03198216637965db0b60e01b1480610b1a57506301ffc9a760e01b6001600160e01b0319831614610b1a565b6001600160a01b038216613cda5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c50565b613ce381612d1a565b15613d005760405162461bcd60e51b8152600401610c5090615309565b613d0e600083836001612e1f565b613d1781612d1a565b15613d345760405162461bcd60e51b8152600401610c5090615309565b6001600160a01b0382166000818152610164602090815260408083208054600101905584835261016390915280822080546001600160a01b0319168417905551839291906000805160206153e5833981519152908290a45050565b610d038363a9059cbb60e01b8484604051602401613dae92919061472b565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614112565b6040516001600160a01b0380851660248301528316604482015260648101829052611b349085906323b872dd60e01b90608401613dae565b60006001613e2a8461197b565b613e3491906150ca565b60008381526101946020526040902054909150808214613e8a576001600160a01b038416600090815261019360209081526040808320858452825280832054848452818420819055835261019490915290208190555b506000918252610194602090815260408084208490556001600160a01b03909416835261019381528383209183525290812055565b61019554600090613ed2906001906150ca565b600083815261019660205260408120546101958054939450909284908110613efc57613efc614fe6565b90600052602060002001549050806101958381548110613f1e57613f1e614fe6565b60009182526020808320909101929092558281526101969091526040808220849055858252812055610195805480613f5857613f586152dd565b6001900381819060005260206000200160009055905550505050565b6000613f7f8361197b565b6001600160a01b0390931660009081526101936020908152604080832086845282528083208590559382526101949052919091209190915550565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f613fe56141e4565b613fed614241565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b0383111561405b57506000905060036140df565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156140af573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166140d8576000600192509250506140df565b9150600090505b94509492505050565b8151156140f85781518083602001fd5b8060405162461bcd60e51b8152600401610c50919061448b565b6000614167826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166142729092919063ffffffff16565b805190915015610d0357808060200190518101906141859190615340565b610d035760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c50565b6000806141ef612b26565b805190915015614206578051602090910120919050565b60335480156142155792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b5090565b60008061424c612b35565b805190915015614263578051602090910120919050565b60345480156142155792915050565b60606127c2848460008585600080866001600160a01b031685876040516142999190615242565b60006040518083038185875af1925050503d80600081146142d6576040519150601f19603f3d011682016040523d82523d6000602084013e6142db565b606091505b50915091506142ec87838387613bd9565b979650505050505050565b82805461430390614ca8565b90600052602060002090601f016020900481019282614325576000855561436b565b82601f1061433e57805160ff191683800117855561436b565b8280016001018555821561436b579182015b8281111561436b578251825591602001919060010190614350565b5061423d9291506143eb565b82805461438390614ca8565b90600052602060002090601f0160209004810192826143a5576000855561436b565b82601f106143be5782800160ff1982351617855561436b565b8280016001018555821561436b579182015b8281111561436b5782358255916020019190600101906143d0565b5b8082111561423d57600081556001016143ec565b6001600160e01b03198116811461164457600080fd5b60006020828403121561442857600080fd5b8135610f9f81614400565b60005b8381101561444e578181015183820152602001614436565b83811115611b345750506000910152565b60008151808452614477816020860160208601614433565b601f01601f19169290920160200192915050565b602081526000610f9f602083018461445f565b6000602082840312156144b057600080fd5b5035919050565b80356001600160a01b03811681146144ce57600080fd5b919050565b600080604083850312156144e657600080fd5b6144ef836144b7565b946020939093013593505050565b60006020828403121561450f57600080fd5b610f9f826144b7565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561455657614556614518565b604052919050565b60006001600160401b0383111561457757614577614518565b61458a601f8401601f191660200161452e565b905082815283838301111561459e57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126145c657600080fd5b610f9f8383356020850161455e565b600080604083850312156145e857600080fd5b8235915060208301356001600160401b0381111561460557600080fd5b614611858286016145b5565b9150509250929050565b60008083601f84011261462d57600080fd5b5081356001600160401b0381111561464457600080fd5b602083019150836020828501011115613a8957600080fd5b60008060006040848603121561467157600080fd5b83356001600160401b038082111561468857600080fd5b90850190610180828803121561469d57600080fd5b909350602085013590808211156146b357600080fd5b506146c08682870161461b565b9497909650939450505050565b6000806000606084860312156146e257600080fd5b6146eb846144b7565b92506146f9602085016144b7565b9150604084013590509250925092565b6000806040838503121561471c57600080fd5b50508035926020909101359150565b6001600160a01b03929092168252602082015260400190565b600082601f83011261475557600080fd5b813560206001600160401b0382111561477057614770614518565b8160051b61477f82820161452e565b928352848101820192828101908785111561479957600080fd5b83870192505b848310156142ec576147b0836144b7565b8252918301919083019061479f565b80356001600160801b03811681146144ce57600080fd5b60008060008060008060008060008060006101608c8e0312156147f857600080fd5b6148018c6144b7565b9a5061480f60208d016144b7565b99506001600160401b038060408e0135111561482a57600080fd5b61483a8e60408f01358f016145b5565b99508060608e0135111561484d57600080fd5b61485d8e60608f01358f016145b5565b98508060808e0135111561487057600080fd5b6148808e60808f01358f016145b5565b97508060a08e0135111561489357600080fd5b506148a48d60a08e01358e01614744565b95506148b260c08d016144b7565b94506148c060e08d016144b7565b93506148cf6101008d016147bf565b92506148de6101208d016147bf565b91506148ed6101408d016144b7565b90509295989b509295989b9093969950565b6000806040838503121561491257600080fd5b82359150614922602084016144b7565b90509250929050565b801515811461164457600080fd5b80356144ce8161492b565b60008060008060006080868803121561495c57600080fd5b614965866144b7565b945060208601356001600160401b0381111561498057600080fd5b61498c8882890161461b565b90955093505060408601356149a08161492b565b91506149ae606087016144b7565b90509295509295909350565b60a0815260006149cd60a083018861445f565b602083019690965250604081019390935290151560608301526001600160a01b0316608090910152919050565b60ff60f81b881681526000602060e081840152614a1a60e084018a61445f565b8381036040850152614a2c818a61445f565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b81811015614a7e57835183529284019291840191600101614a62565b50909c9b505050505050505050505050565b60008060208385031215614aa357600080fd5b82356001600160401b03811115614ab957600080fd5b614ac58582860161461b565b90969095509350505050565b600080600060608486031215614ae657600080fd5b833592506146f9602085016144b7565b60008060408385031215614b0957600080fd5b614b12836144b7565b91506020830135614b228161492b565b809150509250929050565b60008060208385031215614b4057600080fd5b82356001600160401b0380821115614b5757600080fd5b818501915085601f830112614b6b57600080fd5b813581811115614b7a57600080fd5b8660208260051b8501011115614b8f57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614bf657603f19888603018452614be485835161445f565b94509285019290850190600101614bc8565b5092979650505050505050565b60008060008060808587031215614c1957600080fd5b614c22856144b7565b9350614c30602086016144b7565b92506040850135915060608501356001600160401b03811115614c5257600080fd5b8501601f81018713614c6357600080fd5b614c728782356020840161455e565b91505092959194509250565b60008060408385031215614c9157600080fd5b614c9a836144b7565b9150614922602084016144b7565b600181811c90821680614cbc57607f821691505b60208210811415614cdd57634e487b7160e01b600052602260045260246000fd5b50919050565b602080825260149082015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b6000808335601e19843603018112614d2857600080fd5b8301803591506001600160401b03821115614d4257600080fd5b602001915036819003821315613a8957600080fd5b6000808335601e19843603018112614d6e57600080fd5b83016020810192503590506001600160401b03811115614d8d57600080fd5b803603831315613a8957600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152614de660208201614dd9846144b7565b6001600160a01b03169052565b6000614df4602084016144b7565b6001600160a01b03811660408401525060408301356060830152614e1a606084016144b7565b6001600160a01b038116608084015250614e376080840184614d57565b6101808060a0860152614e4f6101a086018385614d9c565b925060a086013560c0860152614e6760c087016144b7565b6001600160a01b03811660e08701529150614e8460e087016147bf565b9150610100614e9d818701846001600160801b03169052565b614ea88188016147bf565b925050610120614ec2818701846001600160801b03169052565b6101409250808701358387015250614edb828701614939565b9150610160614eed8187018415159052565b614ef88188016144b7565b925050614f0f818601836001600160a01b03169052565b5090949350505050565b6020808252600f908201526e65786365656473204d41585f42505360881b604082015260600190565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615614fbf57614fbf614f8f565b500290565b600082614fe157634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60208082526012908201527165786365656420726f79616c74792062707360701b604082015260600190565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b600060001982141561509457615094614f8f565b5060010190565b6000602082840312156150ad57600080fd5b610f9f826147bf565b6020815260006127c2602083018486614d9c565b6000828210156150dc576150dc614f8f565b500390565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8152600083516151f5816017850160208801614433565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615226816028840160208801614433565b01602801949350505050565b8183823760009101908152919050565b60008251615254818460208701614433565b9190910192915050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906133e39083018461445f565b6000602082840312156152a357600080fd5b8151610f9f81614400565b600082198211156152c1576152c1614f8f565b500190565b6000816152d5576152d5614f8f565b506000190190565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60006020828403121561535257600080fd5b8151610f9f8161492b56fe8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c6bd6b5318a46e5fff572d5e4258a20774aab40cc35ac7680654b9081fcc82f80416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65649f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122036da29fadde1b63187062f59ae9642d9c50c031fc1180e75fbb30880c13b1e2a64736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106103015760003560e01c80636352211e11610191578063aaa3017a116100e2578063cb2ef6f711610090578063cb2ef6f7146109ed578063d111515d14610a11578063d45573f614610a26578063d539139314610a5c578063d547741f14610a7e578063e8a3d48514610a9e578063e985e9c514610ab3578063eb13554f14610ad357600080fd5b8063aaa3017a146108d2578063ac9650d814610911578063b24f2d391461093e578063b507c0161461096d578063b88d4fde1461098d578063c87b56dd146109ad578063ca15c873146109cd57600080fd5b806391d148541161013f57806391d148541461080c578063938e3d7b1461082c57806395d89b411461084c5780639bcf7a1514610861578063a0a8e46014610881578063a217fddf1461089d578063a22cb465146108b257600080fd5b80636352211e1461071e57806369dc9ff31461073e5780636f4f28371461076f57806370a082311461078f57806384b0196e146107af5780638da5cb5b146107d75780639010d07c146107ec57600080fd5b8063274e4a1d116102565780633b1475a7116102045780633b1475a7146105ec57806342842e0e1461060357806342966c68146106235780634cc157df146106435780634f6ccce71461068557806355eea188146106a5578063572b6c05146106c5578063600dd5ea146106fe57600080fd5b8063274e4a1d146105015780632a55205a1461051c5780632af6f6021461054a5780632f2ff15d1461056a5780632f745c591461058a57806336568abe146105aa57806338841782146105ca57600080fd5b8063164cb856116102b3578063164cb85614610418578063166c10661461043857806318160ddd146104595780631e7ac4881461046f578063206b60f91461048f57806323b872dd146104b1578063248a9ca3146104d157600080fd5b806301ffc9a71461030657806306fdde031461033b578063079fe40e1461035d578063081812fc14610396578063095ea7b3146103b657806313af4035146103d8578063162094c4146103f8575b600080fd5b34801561031257600080fd5b50610326610321366004614416565b610af4565b60405190151581526020015b60405180910390f35b34801561034757600080fd5b50610350610b20565b604051610332919061448b565b34801561036957600080fd5b506101ca5461037e906001600160a01b031681565b6040516001600160a01b039091168152602001610332565b3480156103a257600080fd5b5061037e6103b136600461449e565b610bb3565b3480156103c257600080fd5b506103d66103d13660046144d3565b610bdb565b005b3480156103e457600080fd5b506103d66103f33660046144fd565b610d08565b34801561040457600080fd5b506103d66104133660046145d5565b610dbe565b34801561042457600080fd5b506103266104333660046144fd565b610e19565b61044b61044636600461465c565b610e6c565b604051908152602001610332565b34801561046557600080fd5b506101955461044b565b34801561047b57600080fd5b506103d661048a3660046144d3565b610fa6565b34801561049b57600080fd5b5061044b60008051602061535e83398151915281565b3480156104bd57600080fd5b506103d66104cc3660046146cd565b61104c565b3480156104dd57600080fd5b5061044b6104ec36600461449e565b600090815260fd602052604090206001015490565b34801561050d57600080fd5b506101c5546103269060ff1681565b34801561052857600080fd5b5061053c610537366004614709565b611084565b60405161033292919061472b565b34801561055657600080fd5b506103d66105653660046147d6565b6110c1565b34801561057657600080fd5b506103d66105853660046148ff565b61146a565b34801561059657600080fd5b5061044b6105a53660046144d3565b61148f565b3480156105b657600080fd5b506103d66105c53660046148ff565b611526565b3480156105d657600080fd5b5061044b60008051602061537e83398151915281565b3480156105f857600080fd5b5061044b6101c95481565b34801561060f57600080fd5b506103d661061e3660046146cd565b6115b0565b34801561062f57600080fd5b506103d661063e36600461449e565b6115cb565b34801561064f57600080fd5b5061066361065e36600461449e565b611647565b604080516001600160a01b03909316835261ffff909116602083015201610332565b34801561069157600080fd5b5061044b6106a036600461449e565b6116b7565b3480156106b157600080fd5b5061044b6106c0366004614944565b61174c565b3480156106d157600080fd5b506103266106e03660046144fd565b6001600160a01b031660009081526099602052604090205460ff1690565b34801561070a57600080fd5b506103d66107193660046144d3565b611790565b34801561072a57600080fd5b5061037e61073936600461449e565b611828565b34801561074a57600080fd5b5061075e6107593660046144fd565b61185e565b6040516103329594939291906149ba565b34801561077b57600080fd5b506103d661078a3660046144fd565b611924565b34801561079b57600080fd5b5061044b6107aa3660046144fd565b61197b565b3480156107bb57600080fd5b506107c4611a02565b60405161033297969594939291906149fa565b3480156107e357600080fd5b5061037e611aa0565b3480156107f857600080fd5b5061037e610807366004614709565b611ad8565b34801561081857600080fd5b506103266108273660046148ff565b611af1565b34801561083857600080fd5b506103d6610847366004614a90565b611b1c565b34801561085857600080fd5b50610350611b3a565b34801561086d57600080fd5b506103d661087c366004614ad1565b611b4a565b34801561088d57600080fd5b5060405160018152602001610332565b3480156108a957600080fd5b5061044b600081565b3480156108be57600080fd5b506103d66108cd366004614af6565b611bfe565b3480156108de57600080fd5b506108f26108ed36600461465c565b611c10565b6040805192151583526001600160a01b03909116602083015201610332565b34801561091d57600080fd5b5061093161092c366004614b2d565b611c67565b6040516103329190614ba1565b34801561094a57600080fd5b506101cc546101cd546001600160a01b03909116906001600160801b0316610663565b34801561097957600080fd5b506103d6610988366004614af6565b611ded565b34801561099957600080fd5b506103d66109a8366004614c03565b611e60565b3480156109b957600080fd5b506103506109c836600461449e565b611e99565b3480156109d957600080fd5b5061044b6109e836600461449e565b611f3c565b3480156109f957600080fd5b506d455243373231536563757269747960901b61044b565b348015610a1d57600080fd5b506103d6611f54565b348015610a3257600080fd5b506101cb546101cd546001600160a01b0390911690600160801b90046001600160801b0316610663565b348015610a6857600080fd5b5061044b6000805160206153c583398151915281565b348015610a8a57600080fd5b506103d6610a993660046148ff565b611fb2565b348015610aaa57600080fd5b50610350611fd7565b348015610abf57600080fd5b50610326610ace366004614c7e565b612066565b348015610adf57600080fd5b506101cb5461037e906001600160a01b031681565b6000610aff82612095565b80610b1a57506001600160e01b0319821663152a902d60e11b145b92915050565b60606101618054610b3090614ca8565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5c90614ca8565b8015610ba95780601f10610b7e57610100808354040283529160200191610ba9565b820191906000526020600020905b815481529060010190602001808311610b8c57829003601f168201915b5050505050905090565b6000610bbe826120ba565b50600090815261016560205260409020546001600160a01b031690565b6000610be682611828565b9050806001600160a01b0316836001600160a01b03161415610c595760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b806001600160a01b0316610c6b6120df565b6001600160a01b03161480610c875750610c8781610ace6120df565b610cf95760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610c50565b610d0383836120e9565b505050565b6000610d1381612158565b610d1e600083611af1565b610d6a5760405162461bcd60e51b815260206004820152601b60248201527f6e6577206f776e6572206e6f74206d6f64756c652061646d696e2e00000000006044820152606401610c50565b6101c880546001600160a01b038481166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a3505050565b610dc6612169565b610de3576040516318c4c13760e21b815260040160405180910390fd5b6101c55460ff1615610e0b576040516393dafeb760e01b815260048101839052602401610c50565b610e158282612185565b5050565b6001600160a01b0380821660009081526101c760205260408120600381015491929091610100900416610e5e5760405162461bcd60e51b8152600401610c5090614ce3565b60010154913f909114919050565b6000610e766121fc565b6000610e83858585612256565b90506000610e9460208701876144fd565b9050610ebb81610ea76080890189614d11565b6001610eb660208c018c6144fd565b6123b2565b92506000610ecf60408801602089016144fd565b6001600160a01b031614610f3f576040518060400160405280876020016020810190610efb91906144fd565b6001600160a01b03908116825260408981013560209384015260008781526101d0845220835181546001600160a01b03191692169190911781559101516001909101555b610f488661258b565b82816001600160a01b0316836001600160a01b03167f15fb5f25e8ebed9eee6472747d42b9a3cf11ecf1a51cd0ebb83652e895552f3189604051610f8c9190614dc5565b60405180910390a45050610f9f60018055565b9392505050565b6000610fb181612158565b612710821115610fd35760405162461bcd60e51b8152600401610c5090614f19565b6101cd80546001600160801b03166001600160401b038416600160801b021790556101cb80546001600160a01b0319166001600160a01b0385169081179091556040518381527fe2497bd806ec41a6e0dd992c29a72efc0ef8fec9092d1978fd4a1e00b2f18304906020015b60405180910390a2505050565b61105d6110576120df565b8261276b565b6110795760405162461bcd60e51b8152600401610c5090614f42565b610d038383836127ca565b60008060008061109386611647565b90945084925061ffff1690506127106110ac8287614fa5565b6110b69190614fc4565b925050509250929050565b600054610100900460ff16158080156110e15750600054600160ff909116105b806110fb5750303b1580156110fb575060005460ff166001145b61115e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c50565b6000805460ff191660011790558015611181576000805461ff0019166101001790555b61118961292c565b6111cf6040518060400160405280600b81526020016a546f6b656e45524337323160a81b815250604051806040016040528060018152602001603160f81b81525061295d565b6111d88761298e565b6111e28a8a6129c6565b6101cc80546001600160a01b03199081166001600160a01b03888116919091179092556101cd80546001600160801b0319166001600160801b0388161790556101cb805482168584161790556101ca80549091169188169190911790558751611253906101ce9060208b01906142f7565b50612710836001600160801b0316111561127f5760405162461bcd60e51b8152600401610c5090614f19565b6101cd80546001600160801b03808616600160801b0291161790556101c880546001600160a01b038e166001600160a01b03199091161790556112c360008d6129f7565b6112db6000805160206153c58339815191528d6129f7565b6112f36000805160206153c58339815191528c6129f7565b61130b60008051602061537e8339815191528d6129f7565b61132360008051602061537e83398151915280612a01565b61133b60008051602061535e8339815191528d6129f7565b61135460008051602061535e83398151915260006129f7565b6040516001600160a01b038716907f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a26040516001600160801b03841681526001600160a01b038316907fe2497bd806ec41a6e0dd992c29a72efc0ef8fec9092d1978fd4a1e00b2f183049060200160405180910390a26040516001600160801b03851681526001600160a01b038616907f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a2801561145c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050505050565b600082815260fd602052604090206001015461148581612158565b610d038383612a4c565b600061149a8361197b565b82106114fc5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610c50565b506001600160a01b0391909116600090815261019360209081526040808320938352929052205490565b61152e6120df565b6001600160a01b0316816001600160a01b0316146115a65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610c50565b610e158282612a6f565b610d0383838360405180602001604052806000815250611e60565b6115d66110576120df565b61163b5760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610c50565b61164481612a92565b50565b60008181526101d060209081526040808320815180830190925280546001600160a01b03168083526001909101549282019290925282911561168f57805160208201516116ad565b6101cc546101cd546001600160a01b03909116906001600160801b03165b9250925050915091565b60006116c36101955490565b82106117265760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610c50565b610195828154811061173a5761173a614fe6565b90600052602060002001549050919050565b60006117566121fc565b6000805160206153c583398151915261176e81612158565b61177b87878787876123b2565b91505061178760018055565b95945050505050565b600061179b81612158565b6127108211156117bd5760405162461bcd60e51b8152600401610c5090614ffc565b6101cc80546001600160a01b0319166001600160a01b0385169081179091556101cd80546001600160801b0319166001600160801b0385161790556040518381527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200161103f565b600081815261016360205260408120546001600160a01b031680610b1a5760405162461bcd60e51b8152600401610c5090615028565b6101c76020526000908152604090208054819061187a90614ca8565b80601f01602080910402602001604051908101604052809291908181526020018280546118a690614ca8565b80156118f35780601f106118c8576101008083540402835291602001916118f3565b820191906000526020600020905b8154815290600101906020018083116118d657829003601f168201915b50505050600183015460028401546003909401549293909290915060ff81169061010090046001600160a01b031685565b600061192f81612158565b6101ca80546001600160a01b0319166001600160a01b0384169081179091556040517f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a25050565b60006001600160a01b0382166119e55760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610c50565b506001600160a01b03166000908152610164602052604090205490565b6000606080600080600060606033546000801b148015611a225750603454155b611a665760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b6044820152606401610c50565b611a6e612b26565b611a76612b35565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6101c854600090611abb9082906001600160a01b0316611af1565b611ac55750600090565b6101c8546001600160a01b03165b905090565b600082815261012f60205260408120610f9f9083612b44565b600091825260fd602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000611b2781612158565b611b346101ce8484614377565b50505050565b60606101628054610b3090614ca8565b6000611b5581612158565b612710821115611b775760405162461bcd60e51b8152600401610c5090614ffc565b6040805180820182526001600160a01b03858116808352602080840187815260008a81526101d08352869020945185546001600160a01b031916941693909317845591516001909301929092559151848152909186917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d910160405180910390a350505050565b610e15611c096120df565b8383612b50565b6000806000611c20868686612c1c565b61012087013560009081526101cf602052604090205490915060ff16158015611c5c5750611c5c6000805160206153c583398151915282611af1565b969095509350505050565b6060816001600160401b03811115611c8157611c81614518565b604051908082528060200260200182016040528015611cb457816020015b6060815260200190600190039081611c9f5790505b5090506000611cc16120df565b9050336001600160a01b038216141560005b84811015611de4578115611d5257611d3030878784818110611cf757611cf7614fe6565b9050602002810190611d099190614d11565b86604051602001611d1c9392919061505a565b604051602081830303815290604052612c78565b848281518110611d4257611d42614fe6565b6020026020010181905250611dd2565b611db430878784818110611d6857611d68614fe6565b9050602002810190611d7a9190614d11565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612c7892505050565b848281518110611dc657611dc6614fe6565b60200260200101819052505b80611ddc81615080565b915050611cd3565b50505092915050565b6000805160206153c5833981519152611e0581612158565b6001600160a01b0380841660009081526101c7602052604090206003810154909161010090910416611e495760405162461bcd60e51b8152600401610c5090614ce3565b600301805460ff1916921515929092179091555050565b611e71611e6b6120df565b8361276b565b611e8d5760405162461bcd60e51b8152600401610c5090614f42565b611b3484848484612c9d565b60008181526101c660205260409020805460609190611eb790614ca8565b80601f0160208091040260200160405190810160405280929190818152602001828054611ee390614ca8565b8015611f305780601f10611f0557610100808354040283529160200191611f30565b820191906000526020600020905b815481529060010190602001808311611f1357829003601f168201915b50505050509050919050565b600081815261012f60205260408120610b1a90612cd0565b611f5c612169565b611f79576040516318c4c13760e21b815260040160405180910390fd5b6101c5805460ff191660011790556040517feef043febddf4e1d1cf1f72ff1407b84e036e805aa0934418cb82095da8d716490600090a1565b600082815260fd6020526040902060010154611fcd81612158565b610d038383612a6f565b6101ce8054611fe590614ca8565b80601f016020809104026020016040519081016040528092919081815260200182805461201190614ca8565b801561205e5780601f106120335761010080835404028352916020019161205e565b820191906000526020600020905b81548152906001019060200180831161204157829003601f168201915b505050505081565b6001600160a01b0391821660009081526101666020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663780e9d6360e01b1480610b1a5750610b1a82612cda565b6120c381612d1a565b6116445760405162461bcd60e51b8152600401610c5090615028565b6000611ad3612d38565b60008181526101656020526040902080546001600160a01b0319166001600160a01b038416908117909155819061211f82611828565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611644816121646120df565b612d62565b6000611ad360008051602061537e8339815191526108276120df565b80516121a45760405163a094836b60e01b815260040160405180910390fd5b60008281526101c66020908152604090912082516121c4928401906142f7565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b6002600154141561224f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c50565b6002600155565b6000806000612266868686611c10565b91509150816122ab5760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b6044820152606401610c50565b426122bd610100880160e0890161509b565b6001600160801b0316111580156122ee5750426122e26101208801610100890161509b565b6001600160801b031610155b61232c5760405162461bcd60e51b815260206004820152600f60248201526e1c995c5d595cdd08195e1c1a5c9959608a1b6044820152606401610c50565b600061233b60208801886144fd565b6001600160a01b031614156123885760405162461bcd60e51b81526020600482015260136024820152721c9958da5c1a595b9d081d5b9919599a5b9959606a1b6044820152606401610c50565b61012086013560009081526101cf60205260409020805460ff191660011790559150509392505050565b6001600160a01b038116836123f65760405162461bcd60e51b815260206004820152600a60248201526932b6b83a3c903ab9349760b11b6044820152606401610c50565b6124368186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061218592505050565b6124408682612dbb565b60408051833b818101909252833f9180600060208401873c81526040805160c06020601f8a01819004028201810190925260a0810188815290918291908a908a90819085018382808284376000920182905250938552505050602080830186905284518582012060408085019190915289151560608501526001600160a01b03891660809094018490529282526101c781529190208251805191926124ea928492909101906142f7565b506020820151600182015560408083015160028301556060830151600390920180546080909401516001600160a81b0319909416921515610100600160a81b031916929092176101006001600160a01b0394851602179091555184918a16907f9d89e36eadf856db0ad9ffb5a569e07f95634dddd9501141ecf04820484ad0dc90612578908b908b906150b6565b60405180910390a3505095945050505050565b60a08101356125cb5734156116445760405162461bcd60e51b81526020600482015260066024820152652156616c756560d01b6044820152606401610c50565b6101cd5460a082013590600090612710906125f690600160801b90046001600160801b031684614fa5565b6126009190614fc4565b905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61262760e0850160c086016144fd565b6001600160a01b031614156126835781341461267e5760405162461bcd60e51b815260206004820152601660248201527536bab9ba1039b2b732103a37ba30b610383934b1b29760511b6044820152606401610c50565b6126c6565b34156126c65760405162461bcd60e51b81526020600482015260126024820152716d73672076616c7565206e6f74207a65726f60701b6044820152606401610c50565b6000806126d960808601606087016144fd565b6001600160a01b0316146126fc576126f760808501606086016144fd565b61270a565b6101ca546001600160a01b03165b905061273a61271f60e0860160c087016144fd565b6127276120df565b6101cb546001600160a01b031685612dd5565b611b3461274d60e0860160c087016144fd565b6127556120df565b8361276086886150ca565b612dd5565b60018055565b60008061277783611828565b9050806001600160a01b0316846001600160a01b0316148061279e575061279e8185612066565b806127c25750836001600160a01b03166127b784610bb3565b6001600160a01b0316145b949350505050565b826001600160a01b03166127dd82611828565b6001600160a01b0316146128035760405162461bcd60e51b8152600401610c50906150e1565b6001600160a01b0382166128655760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610c50565b6128728383836001612e1f565b826001600160a01b031661288582611828565b6001600160a01b0316146128ab5760405162461bcd60e51b8152600401610c50906150e1565b60008181526101656020908152604080832080546001600160a01b03199081169091556001600160a01b03878116808652610164855283862080546000190190559087168086528386208054600101905586865261016390945282852080549092168417909155905184936000805160206153e583398151915291a4505050565b600054610100900460ff166129535760405162461bcd60e51b8152600401610c5090615126565b61295b612f00565b565b600054610100900460ff166129845760405162461bcd60e51b8152600401610c5090615126565b610e158282612f27565b600054610100900460ff166129b55760405162461bcd60e51b8152600401610c5090615126565b6129bd612f84565b61164481612fab565b600054610100900460ff166129ed5760405162461bcd60e51b8152600401610c5090615126565b610e15828261303a565b610e158282612a4c565b600082815260fd6020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b612a56828261308a565b600082815261012f60205260409020610d039082613111565b612a798282613126565b600082815261012f60205260409020610d0390826131ab565b6000612a9d82611828565b9050612aad816000846001612e1f565b612ab682611828565b60008381526101656020908152604080832080546001600160a01b03199081169091556001600160a01b03851680855261016484528285208054600019019055878552610163909352818420805490911690555192935084926000805160206153e5833981519152908390a45050565b606060358054610b3090614ca8565b606060368054610b3090614ca8565b6000610f9f83836131c0565b816001600160a01b0316836001600160a01b03161415612bae5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610c50565b6001600160a01b0383811660008181526101666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60006127c283838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612c729250612c6691508890506131ea565b80519060200120613324565b90613351565b6060610f9f838360405180606001604052806027815260200161539e60279139613375565b612ca88484846127ca565b612cb4848484846133ed565b611b345760405162461bcd60e51b8152600401610c5090615171565b6000610b1a825490565b60006001600160e01b031982166380ac58cd60e01b1480612d0b57506001600160e01b03198216635b5e139f60e01b145b80610b1a5750610b1a826134f2565b600090815261016360205260409020546001600160a01b0316151590565b3360009081526099602052604081205460ff1615612d5d575060131936013560601c90565b503390565b612d6c8282611af1565b610e1557612d7981613517565b612d84836020613529565b604051602001612d959291906151c3565b60408051601f198184030181529082905262461bcd60e51b8252610c509160040161448b565b610e158282604051806020016040528060008152506136c4565b80612ddf57611b34565b6001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415612e1357612e0e82826136f7565b611b34565b611b348484848461376f565b612e2b848484846137c8565b612e4460008051602061535e8339815191526000611af1565b158015612e5957506001600160a01b03841615155b8015612e6d57506001600160a01b03831615155b15611b3457612e8a60008051602061535e83398151915285611af1565b80612ea85750612ea860008051602061535e83398151915284611af1565b611b345760405162461bcd60e51b815260206004820152602360248201527f7265737472696374656420746f205452414e534645525f524f4c4520686f6c6460448201526265727360e81b6064820152608401610c50565b600054610100900460ff166127655760405162461bcd60e51b8152600401610c5090615126565b600054610100900460ff16612f4e5760405162461bcd60e51b8152600401610c5090615126565b8151612f619060359060208501906142f7565b508051612f759060369060208401906142f7565b50506000603381905560345550565b600054610100900460ff1661295b5760405162461bcd60e51b8152600401610c5090615126565b600054610100900460ff16612fd25760405162461bcd60e51b8152600401610c5090615126565b60005b8151811015610e1557600160996000848481518110612ff657612ff6614fe6565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061303281615080565b915050612fd5565b600054610100900460ff166130615760405162461bcd60e51b8152600401610c5090615126565b8151613075906101619060208501906142f7565b508051610d03906101629060208401906142f7565b6130948282611af1565b610e1557600082815260fd602090815260408083206001600160a01b03851684529091529020805460ff191660011790556130cd6120df565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610f9f836001600160a01b0384166138fe565b6131308282611af1565b15610e1557600082815260fd602090815260408083206001600160a01b03851684529091529020805460ff191690556131676120df565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000610f9f836001600160a01b03841661394d565b60008260000182815481106131d7576131d7614fe6565b9060005260206000200154905092915050565b60607f86633b4ffa94b7c3d316ca70d7d2700f3fdfa7a7806efd31499b513d9176692e61321a60208401846144fd565b61322a60408501602086016144fd565b604085013561323f60808701606088016144fd565b61324c6080880188614d11565b60405161325a929190615232565b60405190819003902060a088013561327860e08a0160c08b016144fd565b6132896101008b0160e08c0161509b565b61329b6101208c016101008d0161509b565b60408051602081019b909b526001600160a01b03998a16908b015296881660608a0152608089019590955292861660a088015260c087019190915260e08601529092166101008401526001600160801b03918216610120808501919091529116610140830152830135610160820152610180016040516020818303038152906040529050919050565b6000610b1a613331613a40565b8360405161190160f01b8152600281019290925260228201526042902090565b60008060006133608585613a4a565b9150915061336d81613a90565b509392505050565b6060600080856001600160a01b0316856040516133929190615242565b600060405180830381855af49150503d80600081146133cd576040519150601f19603f3d011682016040523d82523d6000602084013e6133d2565b606091505b50915091506133e386838387613bd9565b9695505050505050565b60006001600160a01b0384163b156134e757836001600160a01b031663150b7a026134166120df565b8786866040518563ffffffff1660e01b8152600401613438949392919061525e565b6020604051808303816000875af1925050508015613473575060408051601f3d908101601f1916820190925261347091810190615291565b60015b6134cd573d8080156134a1576040519150601f19603f3d011682016040523d82523d6000602084013e6134a6565b606091505b5080516134c55760405162461bcd60e51b8152600401610c5090615171565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506127c2565b506001949350505050565b60006001600160e01b03198216635a05180f60e01b1480610b1a5750610b1a82613c4f565b6060610b1a6001600160a01b03831660145b60606000613538836002614fa5565b6135439060026152ae565b6001600160401b0381111561355a5761355a614518565b6040519080825280601f01601f191660200182016040528015613584576020820181803683370190505b509050600360fc1b8160008151811061359f5761359f614fe6565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106135ce576135ce614fe6565b60200101906001600160f81b031916908160001a90535060006135f2846002614fa5565b6135fd9060016152ae565b90505b6001811115613675576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061363157613631614fe6565b1a60f81b82828151811061364757613647614fe6565b60200101906001600160f81b031916908160001a90535060049490941c9361366e816152c6565b9050613600565b508315610f9f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c50565b6136ce8383613c84565b6136db60008484846133ed565b610d035760405162461bcd60e51b8152600401610c5090615171565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613744576040519150601f19603f3d011682016040523d82523d6000602084013e613749565b606091505b5050905080610d03578282604051635fdc4ec160e11b8152600401610c5092919061472b565b816001600160a01b0316836001600160a01b0316141561378e57611b34565b6001600160a01b0383163014156137b357612e0e6001600160a01b0385168383613d8f565b611b346001600160a01b038516848484613de5565b60018111156138375760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610c50565b816001600160a01b03851661389557613890816101958054600083815261019660205260408120829055600182018355919091527f54034dca961b61bc2a3147cc0c1986762915b42723ed64155364f17a2e2967700155565b6138b8565b836001600160a01b0316856001600160a01b0316146138b8576138b88582613e1d565b6001600160a01b0384166138d4576138cf81613ebf565b6138f7565b846001600160a01b0316846001600160a01b0316146138f7576138f78482613f74565b5050505050565b600081815260018301602052604081205461394557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b1a565b506000610b1a565b60008181526001830160205260408120548015613a365760006139716001836150ca565b8554909150600090613985906001906150ca565b90508181146139ea5760008660000182815481106139a5576139a5614fe6565b90600052602060002001549050808760000184815481106139c8576139c8614fe6565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806139fb576139fb6152dd565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b1a565b6000915050610b1a565b6000611ad3613fba565b600080825160411415613a815760208301516040840151606085015160001a613a758782858561402e565b94509450505050613a89565b506000905060025b9250929050565b6000816004811115613aa457613aa46152f3565b1415613aad5750565b6001816004811115613ac157613ac16152f3565b1415613b0a5760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610c50565b6002816004811115613b1e57613b1e6152f3565b1415613b6c5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610c50565b6003816004811115613b8057613b806152f3565b14156116445760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610c50565b60608315613c45578251613c3e576001600160a01b0385163b613c3e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c50565b50816127c2565b6127c283836140e8565b60006001600160e01b03198216637965db0b60e01b1480610b1a57506301ffc9a760e01b6001600160e01b0319831614610b1a565b6001600160a01b038216613cda5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c50565b613ce381612d1a565b15613d005760405162461bcd60e51b8152600401610c5090615309565b613d0e600083836001612e1f565b613d1781612d1a565b15613d345760405162461bcd60e51b8152600401610c5090615309565b6001600160a01b0382166000818152610164602090815260408083208054600101905584835261016390915280822080546001600160a01b0319168417905551839291906000805160206153e5833981519152908290a45050565b610d038363a9059cbb60e01b8484604051602401613dae92919061472b565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614112565b6040516001600160a01b0380851660248301528316604482015260648101829052611b349085906323b872dd60e01b90608401613dae565b60006001613e2a8461197b565b613e3491906150ca565b60008381526101946020526040902054909150808214613e8a576001600160a01b038416600090815261019360209081526040808320858452825280832054848452818420819055835261019490915290208190555b506000918252610194602090815260408084208490556001600160a01b03909416835261019381528383209183525290812055565b61019554600090613ed2906001906150ca565b600083815261019660205260408120546101958054939450909284908110613efc57613efc614fe6565b90600052602060002001549050806101958381548110613f1e57613f1e614fe6565b60009182526020808320909101929092558281526101969091526040808220849055858252812055610195805480613f5857613f586152dd565b6001900381819060005260206000200160009055905550505050565b6000613f7f8361197b565b6001600160a01b0390931660009081526101936020908152604080832086845282528083208590559382526101949052919091209190915550565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f613fe56141e4565b613fed614241565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b0383111561405b57506000905060036140df565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156140af573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166140d8576000600192509250506140df565b9150600090505b94509492505050565b8151156140f85781518083602001fd5b8060405162461bcd60e51b8152600401610c50919061448b565b6000614167826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166142729092919063ffffffff16565b805190915015610d0357808060200190518101906141859190615340565b610d035760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c50565b6000806141ef612b26565b805190915015614206578051602090910120919050565b60335480156142155792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b5090565b60008061424c612b35565b805190915015614263578051602090910120919050565b60345480156142155792915050565b60606127c2848460008585600080866001600160a01b031685876040516142999190615242565b60006040518083038185875af1925050503d80600081146142d6576040519150601f19603f3d011682016040523d82523d6000602084013e6142db565b606091505b50915091506142ec87838387613bd9565b979650505050505050565b82805461430390614ca8565b90600052602060002090601f016020900481019282614325576000855561436b565b82601f1061433e57805160ff191683800117855561436b565b8280016001018555821561436b579182015b8281111561436b578251825591602001919060010190614350565b5061423d9291506143eb565b82805461438390614ca8565b90600052602060002090601f0160209004810192826143a5576000855561436b565b82601f106143be5782800160ff1982351617855561436b565b8280016001018555821561436b579182015b8281111561436b5782358255916020019190600101906143d0565b5b8082111561423d57600081556001016143ec565b6001600160e01b03198116811461164457600080fd5b60006020828403121561442857600080fd5b8135610f9f81614400565b60005b8381101561444e578181015183820152602001614436565b83811115611b345750506000910152565b60008151808452614477816020860160208601614433565b601f01601f19169290920160200192915050565b602081526000610f9f602083018461445f565b6000602082840312156144b057600080fd5b5035919050565b80356001600160a01b03811681146144ce57600080fd5b919050565b600080604083850312156144e657600080fd5b6144ef836144b7565b946020939093013593505050565b60006020828403121561450f57600080fd5b610f9f826144b7565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561455657614556614518565b604052919050565b60006001600160401b0383111561457757614577614518565b61458a601f8401601f191660200161452e565b905082815283838301111561459e57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126145c657600080fd5b610f9f8383356020850161455e565b600080604083850312156145e857600080fd5b8235915060208301356001600160401b0381111561460557600080fd5b614611858286016145b5565b9150509250929050565b60008083601f84011261462d57600080fd5b5081356001600160401b0381111561464457600080fd5b602083019150836020828501011115613a8957600080fd5b60008060006040848603121561467157600080fd5b83356001600160401b038082111561468857600080fd5b90850190610180828803121561469d57600080fd5b909350602085013590808211156146b357600080fd5b506146c08682870161461b565b9497909650939450505050565b6000806000606084860312156146e257600080fd5b6146eb846144b7565b92506146f9602085016144b7565b9150604084013590509250925092565b6000806040838503121561471c57600080fd5b50508035926020909101359150565b6001600160a01b03929092168252602082015260400190565b600082601f83011261475557600080fd5b813560206001600160401b0382111561477057614770614518565b8160051b61477f82820161452e565b928352848101820192828101908785111561479957600080fd5b83870192505b848310156142ec576147b0836144b7565b8252918301919083019061479f565b80356001600160801b03811681146144ce57600080fd5b60008060008060008060008060008060006101608c8e0312156147f857600080fd5b6148018c6144b7565b9a5061480f60208d016144b7565b99506001600160401b038060408e0135111561482a57600080fd5b61483a8e60408f01358f016145b5565b99508060608e0135111561484d57600080fd5b61485d8e60608f01358f016145b5565b98508060808e0135111561487057600080fd5b6148808e60808f01358f016145b5565b97508060a08e0135111561489357600080fd5b506148a48d60a08e01358e01614744565b95506148b260c08d016144b7565b94506148c060e08d016144b7565b93506148cf6101008d016147bf565b92506148de6101208d016147bf565b91506148ed6101408d016144b7565b90509295989b509295989b9093969950565b6000806040838503121561491257600080fd5b82359150614922602084016144b7565b90509250929050565b801515811461164457600080fd5b80356144ce8161492b565b60008060008060006080868803121561495c57600080fd5b614965866144b7565b945060208601356001600160401b0381111561498057600080fd5b61498c8882890161461b565b90955093505060408601356149a08161492b565b91506149ae606087016144b7565b90509295509295909350565b60a0815260006149cd60a083018861445f565b602083019690965250604081019390935290151560608301526001600160a01b0316608090910152919050565b60ff60f81b881681526000602060e081840152614a1a60e084018a61445f565b8381036040850152614a2c818a61445f565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b81811015614a7e57835183529284019291840191600101614a62565b50909c9b505050505050505050505050565b60008060208385031215614aa357600080fd5b82356001600160401b03811115614ab957600080fd5b614ac58582860161461b565b90969095509350505050565b600080600060608486031215614ae657600080fd5b833592506146f9602085016144b7565b60008060408385031215614b0957600080fd5b614b12836144b7565b91506020830135614b228161492b565b809150509250929050565b60008060208385031215614b4057600080fd5b82356001600160401b0380821115614b5757600080fd5b818501915085601f830112614b6b57600080fd5b813581811115614b7a57600080fd5b8660208260051b8501011115614b8f57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614bf657603f19888603018452614be485835161445f565b94509285019290850190600101614bc8565b5092979650505050505050565b60008060008060808587031215614c1957600080fd5b614c22856144b7565b9350614c30602086016144b7565b92506040850135915060608501356001600160401b03811115614c5257600080fd5b8501601f81018713614c6357600080fd5b614c728782356020840161455e565b91505092959194509250565b60008060408385031215614c9157600080fd5b614c9a836144b7565b9150614922602084016144b7565b600181811c90821680614cbc57607f821691505b60208210811415614cdd57634e487b7160e01b600052602260045260246000fd5b50919050565b602080825260149082015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b6000808335601e19843603018112614d2857600080fd5b8301803591506001600160401b03821115614d4257600080fd5b602001915036819003821315613a8957600080fd5b6000808335601e19843603018112614d6e57600080fd5b83016020810192503590506001600160401b03811115614d8d57600080fd5b803603831315613a8957600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152614de660208201614dd9846144b7565b6001600160a01b03169052565b6000614df4602084016144b7565b6001600160a01b03811660408401525060408301356060830152614e1a606084016144b7565b6001600160a01b038116608084015250614e376080840184614d57565b6101808060a0860152614e4f6101a086018385614d9c565b925060a086013560c0860152614e6760c087016144b7565b6001600160a01b03811660e08701529150614e8460e087016147bf565b9150610100614e9d818701846001600160801b03169052565b614ea88188016147bf565b925050610120614ec2818701846001600160801b03169052565b6101409250808701358387015250614edb828701614939565b9150610160614eed8187018415159052565b614ef88188016144b7565b925050614f0f818601836001600160a01b03169052565b5090949350505050565b6020808252600f908201526e65786365656473204d41585f42505360881b604082015260600190565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615614fbf57614fbf614f8f565b500290565b600082614fe157634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60208082526012908201527165786365656420726f79616c74792062707360701b604082015260600190565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b600060001982141561509457615094614f8f565b5060010190565b6000602082840312156150ad57600080fd5b610f9f826147bf565b6020815260006127c2602083018486614d9c565b6000828210156150dc576150dc614f8f565b500390565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8152600083516151f5816017850160208801614433565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615226816028840160208801614433565b01602801949350505050565b8183823760009101908152919050565b60008251615254818460208701614433565b9190910192915050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906133e39083018461445f565b6000602082840312156152a357600080fd5b8151610f9f81614400565b600082198211156152c1576152c1614f8f565b500190565b6000816152d5576152d5614f8f565b506000190190565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60006020828403121561535257600080fd5b8151610f9f8161492b56fe8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c6bd6b5318a46e5fff572d5e4258a20774aab40cc35ac7680654b9081fcc82f80416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65649f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122036da29fadde1b63187062f59ae9642d9c50c031fc1180e75fbb30880c13b1e2a64736f6c634300080b0033",
  "devdoc": {
    "errors": {
      "NFTMetadataFrozen(uint256)": [
        {
          "details": "the nft metadata is frozen"
        }
      ],
      "NFTMetadataInvalidUrl()": [
        {
          "details": "Invalid token metadata url"
        }
      ],
      "NFTMetadataUnauthorized()": [
        {
          "details": "The sender is not authorized to perform the action"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Override the approve function to check the whitelist"
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}."
      },
      "contractType()": {
        "details": "Returns the module type of the contract."
      },
      "contractVersion()": {
        "details": "Returns the version of the contract."
      },
      "eip712Domain()": {
        "details": "See {EIP-5267}. _Available since v4.9._"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getDefaultRoyaltyInfo()": {
        "details": "Returns the platform fee bps and recipient."
      },
      "getPlatformFeeInfo()": {
        "details": "Returns the platform fee bps and recipient."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getRoyaltyInfoForToken(uint256)": {
        "details": "Returns the royalty recipient for a particular token Id."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,string,string,string,address[],address,address,uint128,uint128,address)": {
        "details": "Initializes the contract, like a constructor."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mintTo(address,string,bool,address)": {
        "details": "Lets an account with MINTER_ROLE mint an NFT."
      },
      "mintWithSignature((address,address,uint256,address,string,uint256,address,uint128,uint128,bytes32,bool,address),bytes)": {
        "details": "Mints an NFT according to the provided mint request."
      },
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract.",
        "params": {
          "data": "The bytes data that makes up the batch of function calls to execute."
        },
        "returns": {
          "results": "The bytes data that makes up the result of the batch of function calls executed."
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "See EIP-2981"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setContractURI(string)": {
        "details": "Lets a module admin set the URI for contract-level metadata."
      },
      "setDefaultRoyaltyInfo(address,uint256)": {
        "details": "Lets a module admin update the royalty bps and recipient."
      },
      "setOwner(address)": {
        "details": "Lets a module admin set a new owner for the contract. The new owner must be a module admin."
      },
      "setPlatformFeeInfo(address,uint256)": {
        "details": "Lets a module admin update the fees on primary sales."
      },
      "setPrimarySaleRecipient(address)": {
        "details": "Lets a module admin set the default recipient of all primary sales."
      },
      "setRoyaltyInfoForToken(uint256,address,uint256)": {
        "details": "Lets a module admin set the royalty recipient for a particular token Id."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "Returns the URI for a tokenId"
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "updateSecureField(address,bool)": {
        "details": "Updates the secure field of a token's SecurityInfo."
      },
      "verify((address,address,uint256,address,string,uint256,address,uint128,uint128,bytes32,bool,address),bytes)": {
        "details": "Verifies that a mint request is signed by an account holding MINTER_ROLE (at the time of the function call)."
      }
    },
    "stateVariables": {
      "MAX_BPS": {
        "details": "Max bps in the thirdweb system"
      },
      "METADATA_ROLE": {
        "details": "Only METADATA_ROLE holders can update NFT metadata."
      },
      "MINTER_ROLE": {
        "details": "Only MINTER_ROLE holders can sign off on `MintRequest`s."
      },
      "TRANSFER_ROLE": {
        "details": "Only TRANSFER_ROLE holders can have tokens transferred from or to them, during restricted transfers."
      },
      "_owner": {
        "details": "Owner of the contract (purpose: OpenSea compatibility, etc.)"
      },
      "contractURI": {
        "details": "Contract level metadata."
      },
      "minted": {
        "details": "Mapping from mint request UID => whether the mint request is processed."
      },
      "nextTokenIdToMint": {
        "details": "The token ID of the next token to mint."
      },
      "platformFeeBps": {
        "details": "The % of primary sales collected by the contract as fees."
      },
      "platformFeeRecipient": {
        "details": "The adress that receives all primary sales value."
      },
      "primarySaleRecipient": {
        "details": "The adress that receives all primary sales value."
      },
      "royaltyBps": {
        "details": "The percentage of royalty how much royalty in basis points."
      },
      "royaltyInfoForToken": {
        "details": "Token ID => royalty recipient and bps for token"
      },
      "royaltyRecipient": {
        "details": "The recipient of who gets the royalty."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "freezeMetadata()": {
        "notice": "Freezes the metadata URI for a given NFT."
      },
      "multicall(bytes[])": {
        "notice": "Receives and executes a batch of function calls on this contract."
      },
      "setTokenURI(uint256,string)": {
        "notice": "Sets the metadata URI for a given NFT."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2085,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2088,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2262,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2331,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4847,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_hashedName",
        "offset": 0,
        "slot": "51",
        "type": "t_bytes32"
      },
      {
        "astId": 4850,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_hashedVersion",
        "offset": 0,
        "slot": "52",
        "type": "t_bytes32"
      },
      {
        "astId": 4852,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_name",
        "offset": 0,
        "slot": "53",
        "type": "t_string_storage"
      },
      {
        "astId": 4854,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_version",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 5112,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "__gap",
        "offset": 0,
        "slot": "55",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 4232,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9739,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9847,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "__gap",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5160,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1628,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_roles",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1623_storage)"
      },
      {
        "astId": 1935,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "__gap",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1476,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)6470_storage)"
      },
      {
        "astId": 1598,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "__gap",
        "offset": 0,
        "slot": "304",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2362,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_name",
        "offset": 0,
        "slot": "353",
        "type": "t_string_storage"
      },
      {
        "astId": 2364,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_symbol",
        "offset": 0,
        "slot": "354",
        "type": "t_string_storage"
      },
      {
        "astId": 2368,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_owners",
        "offset": 0,
        "slot": "355",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2372,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_balances",
        "offset": 0,
        "slot": "356",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2376,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "357",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2382,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "358",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3284,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "__gap",
        "offset": 0,
        "slot": "359",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 3438,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "403",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3442,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "404",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3445,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_allTokens",
        "offset": 0,
        "slot": "405",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3449,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "406",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3793,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "__gap",
        "offset": 0,
        "slot": "407",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 9432,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "uriFrozen",
        "offset": 0,
        "slot": "453",
        "type": "t_bool"
      },
      {
        "astId": 9436,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_tokenURI",
        "offset": 0,
        "slot": "454",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 207,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "contracts",
        "offset": 0,
        "slot": "455",
        "type": "t_mapping(t_address,t_struct(SecurityInfo)202_storage)"
      },
      {
        "astId": 246,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "_owner",
        "offset": 0,
        "slot": "456",
        "type": "t_address"
      },
      {
        "astId": 249,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "nextTokenIdToMint",
        "offset": 0,
        "slot": "457",
        "type": "t_uint256"
      },
      {
        "astId": 252,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "primarySaleRecipient",
        "offset": 0,
        "slot": "458",
        "type": "t_address"
      },
      {
        "astId": 255,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "platformFeeRecipient",
        "offset": 0,
        "slot": "459",
        "type": "t_address"
      },
      {
        "astId": 258,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "royaltyRecipient",
        "offset": 0,
        "slot": "460",
        "type": "t_address"
      },
      {
        "astId": 261,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "royaltyBps",
        "offset": 0,
        "slot": "461",
        "type": "t_uint128"
      },
      {
        "astId": 264,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "platformFeeBps",
        "offset": 16,
        "slot": "461",
        "type": "t_uint128"
      },
      {
        "astId": 267,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "contractURI",
        "offset": 0,
        "slot": "462",
        "type": "t_string_storage"
      },
      {
        "astId": 272,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "minted",
        "offset": 0,
        "slot": "463",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 278,
        "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
        "label": "royaltyInfoForToken",
        "offset": 0,
        "slot": "464",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)9673_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(SecurityInfo)202_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721Security.SecurityInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(SecurityInfo)202_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)6470_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)6470_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1623_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1623_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)9673_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IRoyalty.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)9673_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)6470_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 6469,
            "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6155_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)1623_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 1620,
            "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1622,
            "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoyaltyInfo)9673_storage": {
        "encoding": "inplace",
        "label": "struct IRoyalty.RoyaltyInfo",
        "members": [
          {
            "astId": 9670,
            "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9672,
            "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
            "label": "bps",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SecurityInfo)202_storage": {
        "encoding": "inplace",
        "label": "struct ERC721Security.SecurityInfo",
        "members": [
          {
            "astId": 193,
            "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
            "label": "uri",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 195,
            "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
            "label": "hashBytecode",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 197,
            "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
            "label": "hashInitData",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 199,
            "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
            "label": "secure",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 201,
            "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
            "label": "contractAddress",
            "offset": 1,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Set)6155_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 6150,
            "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6154,
            "contract": "@auditfortess/erc721-security/contracts/tokens/ERC721Security.sol:ERC721Security",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}